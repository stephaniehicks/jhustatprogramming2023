[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Location: In person for Fall 2023\nCourse time: Tuesdays and Thursdays from 1:30-2:50pm (Eastern Daylight Time zone)\nCourse location: W4030\nAssignments: Four projects\n\n\n\n\nStephanie C. Hicks (https://www.stephaniehicks.com)\n\nOffice Location: E3545, Wolfe Street building\nEmail: shicks19@jhu.edu\n\n\nI am an Associate Professor in the Department of Biostatistics at the Bloomberg School of Public Health and Department of Biomedical Engineering in the Whiting School of Engineering at Johns Hopkins University, a faculty member of the Johns Hopkins Data Science Lab, and have affiliations with the Malone Center for Engineering in Healthcare, Center for Computational Biology, the Department of Genetic Medicine, and the Department of Biochemistry and Molecular Biology.\nMy research focuses on developing fast, scalable, statistical methodology and open-source software for genomics and biomedical data analysis for human health and disease. My research is problem-forward: I develop statistical methods and software that are motivated by concrete problems, often with real-world, noisy, messy data. I’m also interested in developing theory for how to incorporate design thinking (alongside statistical thinking) in practice of data analysis.\nIf you want, you can find me on Twitter. I’m also a co-host of the The Corresponding Author podcast, member of the Editorial Board for Genome Biology, an Associate Editor for Reproducibility at the Journal of the American Statistical Association, and co-founder of R-Ladies Baltimore.\n\n\n\nJoe Sartini (jsartin1@jhu.edu) is a third year Ph.D. student in Biostatistics, with interest in models for precision medicine applications. Currently, the focus of his work is extracting meaningful insights from time-series produced by Continuous Glucose Monitoring and other devices worn by Type 2 diabetics. Outside of research, he enjoys participating in endurance sports and weightlifting.\nInstructor and TA office hours are announced on CoursePlus. If there are conflicts and/or need to cancel office hours, announcements will be made on CoursePlus.\n\n\n\n\nCourse website: https://stephaniehicks.com/jhustatprogramming2023\nGitHub repository with all course material: https://github.com/stephaniehicks/jhustatprogramming2023\n\n\n\n\nUpon successfully completing this course, students will be able to:\n\nWrite unix code with command-line tools\nInstall and configure software necessary for a statistical programming environment and with version control\nWrite code for advanced programming topics in R, Python, SQL, and tidyverse\nBuild and organize a software package with documentation for publishing on the internet\nWrite code using functional or other programming paradigms and discuss strategies for getting data from APIs or working with large data\nBuild an interactive web application using Shiny or other dashboard tools"
  },
  {
    "objectID": "syllabus.html#instructor",
    "href": "syllabus.html#instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Stephanie C. Hicks (https://www.stephaniehicks.com)\n\nOffice Location: E3545, Wolfe Street building\nEmail: shicks19@jhu.edu\n\n\nI am an Associate Professor in the Department of Biostatistics at the Bloomberg School of Public Health and Department of Biomedical Engineering in the Whiting School of Engineering at Johns Hopkins University, a faculty member of the Johns Hopkins Data Science Lab, and have affiliations with the Malone Center for Engineering in Healthcare, Center for Computational Biology, the Department of Genetic Medicine, and the Department of Biochemistry and Molecular Biology.\nMy research focuses on developing fast, scalable, statistical methodology and open-source software for genomics and biomedical data analysis for human health and disease. My research is problem-forward: I develop statistical methods and software that are motivated by concrete problems, often with real-world, noisy, messy data. I’m also interested in developing theory for how to incorporate design thinking (alongside statistical thinking) in practice of data analysis.\nIf you want, you can find me on Twitter. I’m also a co-host of the The Corresponding Author podcast, member of the Editorial Board for Genome Biology, an Associate Editor for Reproducibility at the Journal of the American Statistical Association, and co-founder of R-Ladies Baltimore."
  },
  {
    "objectID": "syllabus.html#teaching-assistant",
    "href": "syllabus.html#teaching-assistant",
    "title": "Syllabus",
    "section": "",
    "text": "Joe Sartini (jsartin1@jhu.edu) is a third year Ph.D. student in Biostatistics, with interest in models for precision medicine applications. Currently, the focus of his work is extracting meaningful insights from time-series produced by Continuous Glucose Monitoring and other devices worn by Type 2 diabetics. Outside of research, he enjoys participating in endurance sports and weightlifting.\nInstructor and TA office hours are announced on CoursePlus. If there are conflicts and/or need to cancel office hours, announcements will be made on CoursePlus."
  },
  {
    "objectID": "syllabus.html#important-links",
    "href": "syllabus.html#important-links",
    "title": "Syllabus",
    "section": "",
    "text": "Course website: https://stephaniehicks.com/jhustatprogramming2023\nGitHub repository with all course material: https://github.com/stephaniehicks/jhustatprogramming2023"
  },
  {
    "objectID": "syllabus.html#learning-objectives",
    "href": "syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "",
    "text": "Upon successfully completing this course, students will be able to:\n\nWrite unix code with command-line tools\nInstall and configure software necessary for a statistical programming environment and with version control\nWrite code for advanced programming topics in R, Python, SQL, and tidyverse\nBuild and organize a software package with documentation for publishing on the internet\nWrite code using functional or other programming paradigms and discuss strategies for getting data from APIs or working with large data\nBuild an interactive web application using Shiny or other dashboard tools"
  },
  {
    "objectID": "syllabus.html#courseplus",
    "href": "syllabus.html#courseplus",
    "title": "Syllabus",
    "section": "Courseplus",
    "text": "Courseplus\nThe primary communication for the class will go through Courseplus. That is where we will post course announcements, share resources, host most of our asynchronous course discussion, and as the primary means of communication between course participants and course instructors\n\n\n\n\n\n\nImportant\n\n\n\nIf you are registered for the course, you should have access to Courseplus now. Once you have access you will also be able to find all material and dates/times of drop-in hours. Any zoom links will be posted on Courseplus.\n\n\nThe course will make use of the CoursePlus Discussion Forum in order to ask and answer questions regarding any of the course materials. The Instructor and the Teaching Assistant will monitor the discussion boards and answer questions when appropriate."
  },
  {
    "objectID": "syllabus.html#github",
    "href": "syllabus.html#github",
    "title": "Syllabus",
    "section": "GitHub",
    "text": "GitHub\nYou can access all course materials (e.g. lectures, project assignments) here\n\nCourse website: https://stephaniehicks.com/jhustatprogramming2023\nGitHub repository with all course material: https://github.com/stephaniehicks/jhustatprogramming2023"
  },
  {
    "objectID": "syllabus.html#lectures",
    "href": "syllabus.html#lectures",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nThis is course has only one section ending in .01, which means it is an Onsite Synchronous course. This means you are expected to attend class in person. While, I will record the lectures via a zoom recording, I do not plan to post the recordings on CoursePlus. If you have an unexpected / emergency event that comes up and you are unable to attend the lecture in person, you can email me to ask for the recording. I just ask that you briefly provide 1 sentence explanation.\nAttendance is not taken, but I strongly encourage you to attend class to ask questions and participate in class exercises. You will get as much out of the course as you put into it."
  },
  {
    "objectID": "syllabus.html#getting-help",
    "href": "syllabus.html#getting-help",
    "title": "Syllabus",
    "section": "Getting help",
    "text": "Getting help\nIn order of preference, here is a preferred list of ways to get help:\n\nWe strongly encourage you to use Courseplus to ask questions first, before joining office hours. The reason for this is so that other students in the class (who likely have similar questions) can also benefit from the questions and answers asked by your colleagues.\nYou are welcome to join office hours to get more group interactive feedback.\nIf you are not able to make the office hours, appointments can be made by email with the instructor."
  },
  {
    "objectID": "syllabus.html#textbook-and-other-course-material",
    "href": "syllabus.html#textbook-and-other-course-material",
    "title": "Syllabus",
    "section": "Textbook and Other Course Material",
    "text": "Textbook and Other Course Material\nThere is no required textbook. We will make use of several freely available textbooks and other materials. All course materials will be provided. We will use the R and Python software for data analysis, which is freely available for download."
  },
  {
    "objectID": "syllabus.html#software",
    "href": "syllabus.html#software",
    "title": "Syllabus",
    "section": "Software",
    "text": "Software\nWe will make heavy use of R in this course, so you should have R installed. You can obtain R from the Comprehensive R Archive Network. There are versions available for Mac, Windows, and Unix/Linux. This software is required for this course.\nIt is important that you have the latest version of R installed. For this course we will be using R version 4.3.1. You can determine what version of R you have by starting up R and typing into the console R.version.string and hitting the return/enter key. If you do not have this version of R installed, go to CRAN and download and install the latest version.\nWe will also make use of the RStudio interactive development environment (IDE). RStudio requires that R be installed, and so is an “add-on” to R. You can obtain the RStudio Desktop for free from the RStudio web site. In particular, we will make heavy use of it when developing R packages. It is also essential that you have the latest release of RStudio. You can determine the version of RStudio by looking at menu item Help &gt; About RStudio. You should be using RStudio version 2023.09.1+494 (2023.09.1+494) or higher, which requires R version 3.3.0 or higher."
  },
  {
    "objectID": "syllabus.html#projects",
    "href": "syllabus.html#projects",
    "title": "Syllabus",
    "section": "Projects",
    "text": "Projects\nThere will be 4 assignments, due every 2–3 weeks. Projects will be submitted electronically via the Drop Box on the CoursePlus web site (unless otherwise specified).\nThe project assignments will be due on\n\nProject 1: Friday November 10, 11:59pm\nProject 2: Tuesday November 28, 11:59pm\nProject 3: Tuesday December 12, 11:59pm\nProject 4: Friday December 22, 11:59pm\n\n\nProject collaboration\nPlease feel free to study together and talk to one another about project assignments. The mutual instruction that students give each other is among the most valuable that can be achieved.\nHowever, it is expected that project assignments will be implemented and written up independently unless otherwise specified. Specifically, please do not share analytic code or output. Please do not collaborate on write-up and interpretation. Please do not access or use solutions from any source before your project assignment is submitted for grading."
  },
  {
    "objectID": "syllabus.html#exams",
    "href": "syllabus.html#exams",
    "title": "Syllabus",
    "section": "Exams",
    "text": "Exams\nThere are no exams in this course."
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\nGrades in the course will be based on Projects 1–4. Grades for the projects and the final grade will be issued via the CoursePlus grade book.\n\nRelative weights\nThe grades are based on four projects. The breakdown of grading will be\n\n25% for Project 1\n25% for Project 2\n25% for Project 3\n25% for Project 4"
  },
  {
    "objectID": "syllabus.html#policy-for-submitted-projects-late",
    "href": "syllabus.html#policy-for-submitted-projects-late",
    "title": "Syllabus",
    "section": "Policy for submitted projects late",
    "text": "Policy for submitted projects late\n\n\n\n\n\n\nImportant\n\n\n\nThe instructor and TA(s) will not accept email late day policy requests.\n\n\nThis is the policy for late submissions that applies to Projects 1-4.\n\nEach student will be given three “free late days” for the rest of the course.\nA late day extends the individual project deadline by 24 hours without penalty.\nThe late days can be applied to just one project (e.g. two late days for Project 2), or they can be split across the two projects (one late day for Project 2 and one late day for Project 3). This is entirely left up to the discretion of the student.\nA max of two “free late days” can be applied to any one project.\nFree late days are intended to give you flexibility: you can use them for any reason no questions asked.\nYou do not get any bonus points for not using your late days.\n\nAlthough the each student is only given a total of three “free late days”, we will be accepting homework from students that pass this limit.\n\nWe will deduct 5% off the 100% starting point for each day the assignment is late.\nIf you use two “free late days” for project, but need a 3rd day, there will be no penalty for the first two late days and there will be a 5% penalty for the 3rd late day.\nIf you do not have any more late days for the term, we will deduct 5% for the assignment that is &lt;24 hours late, 10% points for the assignment that is 24-48 hours late, and 15% points for the assignment that is 48-72 hours late.\n\n\n\n\n\n\n\nImportant\n\n\n\nWe will not grade assignments that are more than 3 days (or more than 72 hours) past the original due date.\n\n\n\nRegrading Policy\nIt is very important to us that all assignments are properly graded. If you believe there is an error in your assignment grading, please send an email to the instructor within 7 days of receiving the grade. No re-grade requests will be accepted orally, and no regrade requests will be accepted more than 7 days after you receive the grade for the assignment."
  },
  {
    "objectID": "syllabus.html#academic-ethics-and-student-conduct-code",
    "href": "syllabus.html#academic-ethics-and-student-conduct-code",
    "title": "Syllabus",
    "section": "Academic Ethics and Student Conduct Code",
    "text": "Academic Ethics and Student Conduct Code\nStudents enrolled in the Bloomberg School of Public Health of The Johns Hopkins University assume an obligation to conduct themselves in a manner appropriate to the University’s mission as an institution of higher education. A student is obligated to refrain from acts which he or she knows, or under the circumstances has reason to know, impair the academic integrity of the University. Violations of academic integrity include, but are not limited to: cheating; plagiarism; knowingly furnishing false information to any agent of the University for inclusion in the academic record; violation of the rights and welfare of animal or human subjects in research; and misconduct as a member of either School or University committees or recognized groups or organizations.\nStudents should be familiar with the policies and procedures specified under Policy and Procedure Manual Student-01 (Academic Ethics), available on the school’s portal.\nThe faculty, staff and students of the Bloomberg School of Public Health and the Johns Hopkins University have the shared responsibility to conduct themselves in a manner that upholds the law and respects the rights of others. Students enrolled in the School are subject to the Student Conduct Code (detailed in Policy and Procedure Manual Student-06) and assume an obligation to conduct themselves in a manner which upholds the law and respects the rights of others. They are responsible for maintaining the academic integrity of the institution and for preserving an environment conducive to the safe pursuit of the School’s educational, research, and professional practice missions.\n\nCourse code of Conduct\nWe are committed to providing a welcoming, inclusive, and harassment-free experience for everyone, regardless of gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion (or lack thereof), political beliefs/leanings, or technology choices. We do not tolerate harassment of course participants in any form. Sexual language and imagery is not appropriate for any work event, including group meetings, conferences, talks, parties, Twitter and other online media. This code of conduct applies to all course participants, including instructors and TAs, and applies to all modes of interaction, both in-person and online, including GitHub project repos, Slack channels, and Twitter.\nCourse participants violating these rules will be referred to leadership of the Department of Biostatistics and the Title IX coordinator at JHU and may face expulsion from the class.\nAll class participants agree to:\n\nBe considerate in speech and actions, and actively seek to acknowledge and respect the boundaries of other members.\nBe respectful. Disagreements happen, but do not require poor behavior or poor manners. Frustration is inevitable, but it should never turn into a personal attack. A community where people feel uncomfortable or threatened is not a productive one. Course participants should be respectful both of the other course participants and those outside the course.\nRefrain from demeaning, discriminatory, or harassing behavior and speech. Harassment includes, but is not limited to: deliberate intimidation; stalking; unwanted photography or recording; sustained or willful disruption of talks or other events; inappropriate physical contact; use of sexual or discriminatory imagery, comments, or jokes; and unwelcome sexual attention. If you feel that someone has harassed you or otherwise treated you inappropriately, please alert Stephanie Hicks.\nTake care of each other. Refrain from advocating for, or encouraging, any of the above behavior. And, if someone asks you to stop, then stop. Alert Stephanie Hicks if you notice a dangerous situation, someone in distress, or violations of this code of conduct, even if they seem inconsequential.\n\n\n\nNeed Help?\nPlease speak with Stephanie Hicks or one of the TAs. You can also reach out to Karen Bandeen-Roche, chair of the department of Biostatistics or Margaret Taub, Ombudsman for the Department of Biostatistics.\nYou may also reach out to any Hopkins resource for sexual harassment, discrimination, or misconduct:\n\nJHU Sexual Assault Helpline, 410-516-7333 (confidential)\n\nUniversity Sexual Assault Response and Prevention website\nJohns Hopkins Compliance Hotline, 844-SPEAK2US (844-733-2528)\nHopkins Policies Online\nJHU Office of Institutional Equity 410-516-8075 (nonconfidential)\nJohns Hopkins Student Assistance Program (JHSAP), 443-287-7000\nUniversity Health Services, 410-955-1892\nThe Faculty and Staff Assistance Program (FASAP), 443-997-7000"
  },
  {
    "objectID": "syllabus.html#license-and-attribution",
    "href": "syllabus.html#license-and-attribution",
    "title": "Syllabus",
    "section": "License and attribution",
    "text": "License and attribution\nThis Code of Conduct is distributed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license. Portions of above text comprised of language from the Codes of Conduct adopted by rOpenSci and Django, which are licensed by CC BY-SA 4.0 and CC BY 3.0. This work was further inspired by Ada Initiative’s ‘’how to design a code of conduct for your community’’ and Geek Feminism’s Code of conduct evaluations and expanded by Ashley Johnson and Shannon Ellis in the Jeff Leek group."
  },
  {
    "objectID": "syllabus.html#disability-support-service",
    "href": "syllabus.html#disability-support-service",
    "title": "Syllabus",
    "section": "Disability Support Service",
    "text": "Disability Support Service\nStudents requiring accommodations for disabilities should register with Student Disability Service (SDS). It is the responsibility of the student to register for accommodations with SDS. Accommodations take effect upon approval and apply to the remainder of the time for which a student is registered and enrolled at the Bloomberg School of Public Health. Once a student has been approved for accommodations, the student will receive formal notification and the student will be encouraged to reach out to the instructor.\nIf you have questions about requesting accommodations, please contact BSPH.dss@jhu.edu."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nPrerequisite for the course is Biostatistics 140.776 or knowledge of material from 140.776 is assumed.\nIf you did not take the above course, please contact course instructor to get permission to enroll."
  },
  {
    "objectID": "syllabus.html#general-disclaimers",
    "href": "syllabus.html#general-disclaimers",
    "title": "Syllabus",
    "section": "General Disclaimers",
    "text": "General Disclaimers\nThis syllabus is a general plan, deviations announced to the class by the instructor may be necessary."
  },
  {
    "objectID": "syllabus.html#typos-and-corrections",
    "href": "syllabus.html#typos-and-corrections",
    "title": "Syllabus",
    "section": "Typos and corrections",
    "text": "Typos and corrections\nFeel free to submit typos/errors/etc via the github repository associated with the class: https://github.com/stephaniehicks/jhustatprogramming2023. You will have the thanks of your grateful instructor!"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Learning R\n\nBig Book of R: https://www.bigbookofr.com\nList of resources to learn R (but also Python, SQL, Javascript): https://github.com/delabj/datacamp_alternatives/blob/master/index.md\nlearnr4free. Resources (books, videos, interactive websites, papers) to learn R. Some of the resources are beginner-friendly and start with the installation process: https://www.learnr4free.com/en\nData Science with R by Danielle Navarro: https://robust-tools.djnavarro.net"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Project 1\n\n\n\n\n\n\n\nproject 1\n\n\nprojects\n\n\n\n\nBuilding a website and practicing with command-line tools\n\n\n\n\n\n\nOct 26, 2023\n\n\nStephanie Hicks\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html",
    "href": "posts/2023-11-09-version-control-part-2/index.html",
    "title": "Version control (Part 2)",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nSoftware Carpentry: Version Control with Git\n\n\n\n\n\n\n\n\n\nRead ahead\n\n\n\nIn the previous lesson, we learned how to use git from the command line.\nIn this lesson, we will learn how to use git remotes and GitHub. As preparation, you can sign up for a GitHub account if you do not already have one.\nWe will use the local git repository in the planets directory that we created in the previous lesson. If you do not have this any more, please create it by initializing the git repository and adding the set of git commits from the previous lesson.\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nSoftware Carpentry: Version Control with Git"
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#create-a-remote-repository",
    "href": "posts/2023-11-09-version-control-part-2/index.html#create-a-remote-repository",
    "title": "Version control (Part 2)",
    "section": "Create a remote repository",
    "text": "Create a remote repository\nLog in to GitHub, then click on the icon in the top right corner to create a new repository called planets.\n\nName your repository “planets” and then click “Create Repository”.\n\n\n\n\n\n\nNote\n\n\n\n\nSince this repository will be connected to a local repository, it needs to be empty.\nLeave “Initialize this repository with a README” unchecked, and keep “None” as options for both “Add .gitignore” and “Add a license.”\nSee the “GitHub License and README files” exercise in the Software Carpentry materials for a full explanation of why the repository needs to be empty.\n\n\n\n\nAs soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository\n\nThis effectively does the following on GitHub’s servers:\nmkdir planets\ncd planets\ngit init\nIf you remember back to the earlier lesson where we added and committed our earlier work on mars.txt, we had a diagram of the local repository which looked like this:\n\nNow that we have two repositories, we need a diagram like this:\n\n\n\n\n\n\n\nNote\n\n\n\nOur local repository still contains our earlier work on mars.txt, but the remote repository on GitHub appears empty as it does not contain any files yet.\n\n\nCheck that we still have our history of commits in the git repository from the previous lesson:\ncd ~/Desktop/planets\ngit log --oneline\nc687412 (HEAD -&gt; main) Ignore data files and the results folder.\n1507c2a Add some initial thoughts on spaceships\nad5b7d1 Discuss concerns about Mars' climate for Mummy\n75a0e21 Add concerns about effects of Mars' moons on Wolfman\ncf69058 Start notes on Mars as a base"
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#connect-local-to-remote-repository",
    "href": "posts/2023-11-09-version-control-part-2/index.html#connect-local-to-remote-repository",
    "title": "Version control (Part 2)",
    "section": "Connect local to remote repository",
    "text": "Connect local to remote repository\nNow we connect the two repositories. We do this by making the GitHub repository a “remote” for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it:\n\nClick on the ‘SSH’ link to change the protocol from HTTPS to SSH.\n\n\n\n\n\n\nHTTPS vs. SSH\n\n\n\nWe use SSH here because, while it requires some additional configuration, it is a security protocol widely used by many applications. The steps below describe SSH at a minimum level for GitHub. A supplemental lesson in the Software Carpentry materials discusses advanced setup and concepts of SSH and key pairs, and other material supplemental to git related SSH.\n\n\n\nCopy that URL from the browser, go into the local planets repository, and run this command:\ngit remote add origin git@github.com:&lt;username&gt;/planets.git\nMake sure to use the URL for your repository, i.e. your username.\norigin is a local name used to refer to the remote repository. It could be called anything, but origin is a convention that is often used by default in git and GitHub, so it’s helpful to stick with this unless there’s a reason not to.\nWe can check that the command has worked by running git remote -v:\ngit remote -v\norigin   git@github.com:stephaniehicks/planets.git (fetch)\norigin   git@github.com:stephaniehicks/planets.git (push)\nWe’ll discuss remotes in more detail in the next section, while talking about how they might be used for collaboration."
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#ssh-background-and-setup",
    "href": "posts/2023-11-09-version-control-part-2/index.html#ssh-background-and-setup",
    "title": "Version control (Part 2)",
    "section": "SSH Background and Setup",
    "text": "SSH Background and Setup\nBefore you can connect to a remote repository, you need to set up a way for your computer to authenticate with GitHub so it knows it’s you trying to connect to your remote repository.\nWe are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\nSSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private.\nWhat we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account.\n\n\n\n\n\n\nAdvanced SSH\n\n\n\nA supplemental lesson in the Software Carpentry materials discusses SSH and key pairs in more depth and detail.\n\n\nThe first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once.\nWe will run the list command to check what key pairs already exist on your computer.\nls -al ~/.ssh\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\nIf you have not set up SSH on your computer, your output is\nls: cannot access '/c/Users/&lt;username&gt;/.ssh': No such file or directory\nIf SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519 / id_ed25519.pub or id_rsa / id_rsa.pub depending on how the key pairs were set up. If they don’t exist yet, we use this command to create them.\n\nCreate an SSH key pair\nTo create an SSH key pair we use this command, where the -t option specifies which type of algorithm to use and -C attaches a comment to the key (here, your email):\nssh-keygen -t ed25519 -C \"myemail@email.com\"\nIf you are using a legacy system that doesn’t support the Ed25519 algorithm, use:\nssh-keygen -t rsa -b 4096 -C \"myemail@email.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/c/Users/&lt;username&gt;/.ssh/id_ed25519):\nWe want to use the default file, so just press Enter.\nCreated directory '/c/Users/&lt;username&gt;/.ssh'.\nEnter passphrase (empty for no passphrase):\nNow, it is prompting for a passphrase. If you are using a lab laptop that other people sometimes have access to, create a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no “reset my password” option. Alternatively, if you are using your own laptop, you can leave it empty.\nEnter same passphrase again:\nAfter entering the same passphrase a second time, you receive a confirmation that looks something like this:\nYour identification has been saved in /c/Users/&lt;username&gt;/.ssh/id_ed25519\nYour public key has been saved in /c/Users/&lt;username&gt;/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o myemail@email.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\nThe “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\nNow that we have generated the SSH keys, we will find the SSH files when we check.\nls -al ~/.ssh\ndrwxr-xr-x 1 &lt;username&gt; 197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 &lt;username&gt; 197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 &lt;username&gt; 197121 419 Jul 16 14:48 id_ed25519\n-rw-r--r-- 1 &lt;username&gt; 197121 106 Jul 16 14:48 id_ed25519.pub\n\n\nCopy the public key to GitHub\nNow we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\nssh -T git@github.com\nThe authenticity of host 'github.com (192.30.255.112)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? y\nPlease type 'yes', 'no' or the fingerprint: yes\nWarning: Permanently added 'github.com' (RSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nRight, we forgot that we need to give GitHub our public key!\nFirst, we need to copy the public key. Be sure to include the .pub at the end, otherwise you’re looking at the private key.\ncat ~/.ssh/id_ed25519.pub\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI myemail@email.com\nNow, going to github.com, click on your profile icon in the top right corner to get the drop-down menu. Click “Settings,” then on the settings page, click “SSH and GPG keys,” on the left side “Account settings” menu. Click the “New SSH key” button on the right side. Now, you can add the title (e.g. using the title “MacBook Air” so you can remember where the original key pair files are located), paste your SSH key into the field, and click the “Add SSH key” to complete the setup.\nNow that we’ve set that up, let’s check our authentication again from the command line.\nssh -T git@github.com\nHi stephaniehicks! You've successfully authenticated, but GitHub does not provide shell access.\nGood! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository."
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#push-local-changes-to-a-remote",
    "href": "posts/2023-11-09-version-control-part-2/index.html#push-local-changes-to-a-remote",
    "title": "Version control (Part 2)",
    "section": "Push local changes to a remote",
    "text": "Push local changes to a remote\nNow that authentication is setup, we can return to the remote. This command will push the changes from our local repository to the repository on GitHub:\ngit push origin main\nIf you set up a passphrase, it will prompt you for it. If you completed advanced settings for your authentication, it will not prompt for a passphrase.\nEnumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\nTotal 16 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo https://github.com/stephaniehicks/planets.git\n * [new branch]      main -&gt; main\n\n\n\n\n\n\nProxy\n\n\n\nIf the network you are connected to uses a proxy, there is a chance that your last command failed with “Could not resolve hostname” as the error message.\nTo solve this issue, you need to tell Git about the proxy using git config --global.\nSee the Software Carpentry materials for details.\n\n\n\n\n\n\n\n\nPassword Managers\n\n\n\nIf your operating system has a password manager configured, git push will try to use it when it needs your username and password. For example, this is the default behavior for Git Bash on Windows. If you want to type your username and password at the terminal instead of using a password manager, type:\nunset SSH_ASKPASS\nin the terminal, before you run git push.\n\n\nOur local and remote repositories are now in this state:\n\n\n\n\n\n\n\nThe -u Flag\n\n\n\nYou may see a -u option used with git push in some documentation. This option is synonymous with the --set-upstream-to option for the git branch command, and is used to associate the current branch with a remote branch so that the git pull command can be used without any arguments.\nTo do this, use git push -u origin main once the remote has been set up.\n\n\nWe can pull changes from the remote repository to the local one as well:\ngit pull origin main\nFrom https://github.com/stephaniehicks/planets\n * branch            main     -&gt; FETCH_HEAD\nAlready up-to-date.\nPulling has no effect in this case because the two repositories are already synchronized. If someone else had pushed some changes to the repository on GitHub, though, this command would download them to our local repository."
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#exercises",
    "href": "posts/2023-11-09-version-control-part-2/index.html#exercises",
    "title": "Version control (Part 2)",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nGitHub GUI\n\n\n\nBrowse to your planets repository on GitHub. Under the Code tab, find and click on the text that says “XX commits” (where “XX” is some number). Hover over, and click on, the three buttons to the right of each commit. What information can you gather/explore from these buttons? How would you get that same information in the shell?\n\nThe left-most button (with the picture of a clipboard) copies the full identifier of the commit to the clipboard. In the shell, git log will show you the full commit identifier for each commit.\nWhen you click on the middle button, you’ll see all of the changes that were made in that particular commit. Green shaded lines indicate additions and red ones removals. In the shell we can do the same thing with git diff. In particular, git diff ID1..ID2 where ID1 and ID2 are commit identifiers (e.g. git diff a3bf1e5..041e637) will show the differences between those two commits.\nThe right-most button lets you view all of the files in the repository at the time of that commit. To do this in the shell, we’d need to checkout the repository at that particular time. We can do this with git checkout ID where ID is the identifier of the commit we want to look at. If we do this, we need to remember to put the repository back to the right state afterwards!\n\n\n\n\n\n\n\n\n\nUploading files directly in GitHub browser\n\n\n\nGithub also allows you to skip the command line and upload files directly to your repository without having to leave the browser. There are two options. First you can click the “Upload files” button in the toolbar at the top of the file tree. Or, you can drag and drop files from your desktop onto the file tree. You can read more about this in the GitHub help pages.\n\n\n\n\n\n\n\n\nGitHub Timestamp\n\n\n\nCreate a remote repository on GitHub. Push the contents of your local repository to the remote. Make changes to your local repository and push these changes. Go to the repo you just created on GitHub and check the timestamps of the files. How does GitHub record times, and why?\n\nGitHub displays timestamps in a human readable relative format (i.e. “22 hours ago” or “three weeks ago”). However, if you hover over the timestamp, you can see the exact time at which the last change to the file occurred.\n\n\n\n\n\n\n\n\n\nPush vs. Commit\n\n\n\nIn this lesson, we introduced the git push command. How is git push different from git commit?\n\nWhen we push changes, we’re interacting with a remote repository to update it with the changes we’ve made locally (often this corresponds to sharing the changes we’ve made with others). Commit only updates your local repository.\n\n\n\n\n\n\n\n\n\nGitHub License and README files\n\n\n\nIn this lesson we learned about creating a remote repository on GitHub, but when you initialized your GitHub repo, you didn’t add a README.md or a license file. If you had, what do you think would have happened when you tried to link your local and remote repositories?\n\nIn this case, we’d see a “merge conflict” due to unrelated histories. When GitHub creates a README.md file, it performs a commit in the remote repository. When you try to pull the remote repository to your local repository, Git detects that they have histories that do not share a common origin and refuses to merge.\n\ngit pull origin main\nwarning: no common commits\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/stephaniehicks/planets\n * branch            main     -&gt; FETCH_HEAD\n * [new branch]      main     -&gt; origin/main\nfatal: refusing to merge unrelated histories\nYou can force git to merge the two repositories with the option --allow-unrelated-histories. Be careful when you use this option and carefully examine the contents of local and remote repositories before merging.\ngit pull --allow-unrelated-histories origin main\nFrom https://github.com/stephaniehicks/planets\n * branch            main     -&gt; FETCH_HEAD\nMerge made by the 'recursive' strategy.\nREADME.md | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 README.md\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nA local Git repository can be connected to one or more remote repositories.\nUse the SSH protocol to connect to remote repositories.\ngit push copies changes from a local repository to a remote repository.\ngit pull copies changes from a remote repository to a local repository."
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#exercises-1",
    "href": "posts/2023-11-09-version-control-part-2/index.html#exercises-1",
    "title": "Version control (Part 2)",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nSwitch Roles and Repeat\n\n\n\nSwitch roles and repeat the whole process.\n\n\n\n\n\n\n\n\nReview Changes\n\n\n\nThe Owner pushed commits to the repository without giving any information to the Collaborator. How can the Collaborator find out what has changed with command line? And on GitHub?\n\nOn the command line, the Collaborator can use git fetch origin main to get the remote changes into the local repository, but without merging them. Then by running git diff main origin/main the Collaborator will see the changes output in the terminal.\nOn GitHub, the Collaborator can go to the repository and click on “commits” to view the most recent commits pushed to the repository.\n\n\n\n\n\n\n\n\n\nComment Changes in GitHub\n\n\n\nThe Collaborator has some questions about one line change made by the Owner and has some suggestions to propose.\nWith GitHub, it is possible to comment on the diff of a commit. Over the line of code to comment, a blue comment icon appears to open a comment window.\nThe Collaborator posts their comments and suggestions using the GitHub interface.\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\ngit clone copies a remote repository to create a local repository with a remote called origin automatically set up."
  },
  {
    "objectID": "posts/2023-11-09-version-control-part-2/index.html#exercises-2",
    "href": "posts/2023-11-09-version-control-part-2/index.html#exercises-2",
    "title": "Version control (Part 2)",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nConflicts on Non-textual files\n\n\n\nWhat does Git do when there is a conflict in an image or some other non-textual file that is stored in version control (e.g. mars.jpg)?\n\nGit will return an additional warning in the merge conflict message:\n\nwarning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nGit cannot automatically insert conflict markers into an image as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version.\nWe can also keep both images if we give them different filenames and then add and commit them.\n\n\n\n\n\n\n\n\nA Typical Work Session\n\n\n\nA short example of a typical workflow in an order that will minimize merge conflicts:\n\nUpdate local repo: git pull origin main\nMake changes: e.g. echo 100 &gt;&gt; numbers.txt\nStage changes: git add numbers.txt\nCommit changes: git commit -m \"Add 100 to numbers.txt\"\nUpdate remote: git push origin main\n\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nConflicts occur when two or more people change the same lines of the same file.\nThe version control system does not allow people to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved."
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html",
    "href": "posts/2023-11-02-command-line-part-2/index.html",
    "title": "Advanced command-line tools",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://swcarpentry.github.io/shell-novice\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://swcarpentry.github.io/shell-novice/04-pipefilter\nhttps://swcarpentry.github.io/shell-novice/05-loop\nhttps://swcarpentry.github.io/shell-novice/06-script"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#capturing-output-from-commands",
    "href": "posts/2023-11-02-command-line-part-2/index.html#capturing-output-from-commands",
    "title": "Advanced command-line tools",
    "section": "Capturing output from commands",
    "text": "Capturing output from commands\nIn this section, we will continue to explore how to use pipes to re-direct output from to the terminal and write it to a file.\n\n\n\n\n\n\nDataset\n\n\n\nThe dataset we will use is a folder that contains six files describing some simple organic molecules. The .pdb extension indicates that these files are in Protein Data Bank format, a simple text format that specifies the type and position of each atom in the molecule.\n\nls proteins\n\ncubane.pdb\nethane.pdb\nlengths.txt\nmethane.pdb\noctane.pdb\npentane.pdb\npropane.pdb\n\n\n\n\nLet’s count the lines in one of the files cubane.pdb using the wc command (word count):\n\nwc -l proteins/cubane.pdb\n\n      20 proteins/cubane.pdb\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nUsing wildcard (*), list out all the number of lines in each .pdb file in the protein directory\n\n## try it out \n\n\n\nThis is useful information, but all of that output gets printed to the screen and then it’s gone. Let’s try saving the output to a file with the redirection &gt; operator:\n\n\n\n\n\n\nRedirection operator\n\n\n\nIn the previous lecture, we learned that if we wanted to redirect that output from printing to the terminal and write to a file, we use the &gt; operator like so (command &gt; [file]) where on the left side is output gets piped into a file on the right side.\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWrite the commands for the followings tasks:\n\nUsing the &gt; redirect operator, pipe the output from our example above to a file called lengths.txt.\nPrint the file contents in length.txt to the screen.\n\n\n## try it out"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#appending-data-to-a-file",
    "href": "posts/2023-11-02-command-line-part-2/index.html#appending-data-to-a-file",
    "title": "Advanced command-line tools",
    "section": "Appending data to a file",
    "text": "Appending data to a file\nIn general, it is a very bad idea to try redirecting the output of a command that operates on a file to the same file.\nFor example:\n\n\nBash\n\nsort -n lengths.txt &gt; lengths.txt\n\nDoing something like this may give you incorrect results and/or delete the contents of lengths.txt.\nAn alternative is another type of redirect operator (&gt;&gt;), which is used to append to a file (command &gt;&gt; [file]).\nLet’s try this out.\n\n\n\n\n\n\nExample\n\n\n\nNow test the commands below to reveal the difference between the two operators\n\necho hello &gt; testfile01.txt\n\n\necho hello &gt;&gt; testfile02.txt\n\nTask: Try executing each command twice in a row and then examining the output files. What happened?\n\n\nOK let’s clean up our space before we move on\n\nrm testfile01.txt testfile02.txt"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#passing-output-to-another-command",
    "href": "posts/2023-11-02-command-line-part-2/index.html#passing-output-to-another-command",
    "title": "Advanced command-line tools",
    "section": "Passing output to another command",
    "text": "Passing output to another command\nAnother operator is the vertical bar (|) (or pipe operator) which is used between two commands to pass the output from one command as input to another command ([first] | [second]).\n\n\n\n\n\n\nExample\n\n\n\nLet’s sort the rows in lengths.txt in a numeric order and then pipe the output into another command to show only the first row.\n\ncat lengths.txt\n\n      20 proteins/cubane.pdb\n      12 proteins/ethane.pdb\n       9 proteins/methane.pdb\n      30 proteins/octane.pdb\n      21 proteins/pentane.pdb\n      15 proteins/propane.pdb\n     107 total\n\n\n\nsort -n lengths.txt | head -n 1\n\n       9 proteins/methane.pdb\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s practice using the pipe operator and combine three commands together. Write the following commands and pipe the output with the | operator.\nUsing the *.pdb files in the protein folder:\n\nCount the number of lines in each each *.pdb file.\nSort the lines numerically in an ascending order.\nShow the first line of the output.\n\n\n## try it out"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#loop-basics",
    "href": "posts/2023-11-02-command-line-part-2/index.html#loop-basics",
    "title": "Advanced command-line tools",
    "section": "Loop basics",
    "text": "Loop basics\nAnother way to do this is to use a loop to solve this problem, but first let’s look at the general form of a for loop, using the pseudo-code below:\n\n\nBash\n\nfor thing in list_of_things\ndo\n    operation_using $thing    # Indentation within the loop is not required, but aids legibility\ndone\n\nand we can apply this to our example like this:\n\ncd creatures\nfor filename in basilisk.dat minotaur.dat unicorn.dat\ndo\n    head -n 2 $filename | tail -n 1\ndone\n\nCLASSIFICATION: basiliscus vulgaris\nCLASSIFICATION: bos hominus\nCLASSIFICATION: equus monoceros\n\n\n\n\n\n\n\n\nPro-tip #1\n\n\n\n\nWhen using variables it is also possible to put the names into curly braces to clearly delimit the variable name: $filename is equivalent to ${filename}, but is different from ${file}name. You may find this notation in other people’s programs.\n\n\n\n\n\n\n\n\n\nPro-tip #2\n\n\n\n\nWe have called the variable in this loop filename in order to make its purpose clearer to human readers. The shell itself doesn’t care what the variable is called; if we wrote this loop with x:\n\n\ncd creatures\nfor x in basilisk.dat minotaur.dat unicorn.dat\ndo\n    head -n 2 $x | tail -n 1\ndone\n\nCLASSIFICATION: basiliscus vulgaris\nCLASSIFICATION: bos hominus\nCLASSIFICATION: equus monoceros\n\n\n\n\n\n\n\n\n\n\nPro-tip #3\n\n\n\n\nSpaces are used to separate the elements of the list that we are going to loop over. If one of those elements contains a space character, we need to surround it with quotes, and do the same thing to our loop variable.\n\n\nfor x in \"spooky ghost\" \"scary monster\" \"creepy spider\"\ndo\n   echo $x\ndone\n\nspooky ghost\nscary monster\ncreepy spider\n\n\n\n\n\n\n\n\n\n\nPro-tip #4\n\n\n\n\nThere are other types of loops including\n\n\nThe for loop: executes the given commands over a series of defined number of iterations\nThe while loop: executes the given commands until the given condition changes from true to false\nThe until loop: executes the given commands until a given condition becomes true\nThe select loop: easy way to create a numbered menu from which users can select options. It is useful when you need to ask the user to choose one or more items from a list of choices.\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nUsing the six files in the proteins folder, let’s predict what the output of these loops are.\ncd proteins\nfor datafile in *.pdb\ndo\n    ls *.pdb\ndone\ncd proteins\nfor datafile in *.pdb\ndo\n    ls $datafile\ndone\ncd proteins\nfor datafile in c*\ndo\n    ls $datafile\ndone\ncd proteins\nfor datafile in *c*\ndo\n    ls $datafile\ndone"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#naming-files",
    "href": "posts/2023-11-02-command-line-part-2/index.html#naming-files",
    "title": "Advanced command-line tools",
    "section": "Naming files",
    "text": "Naming files\nYou can also use the variables in for loops to name files or folders.\nFor example, let’s say we want to save a version of the original files in the creatures folder, naming the copies original-basilisk.dat and original-unicorn.dat, etc.\n\ncd creatures\nfor filename in *.dat\ndo\n    cp $filename original-$filename\ndone\n\nls *.dat\n\nbasilisk.dat\nminotaur.dat\noriginal-basilisk.dat\noriginal-minotaur.dat\noriginal-unicorn.dat\nunicorn.dat\n\n\nThis loop runs the cp command once for each filename. The first time, when $filename expands to basilisk.dat, the shell executes:\n\n\nBash\n\ncp basilisk.dat original-basilisk.dat\n\nand so on. Finally, let’s clean up our copies\n\nrm creatures/original-*\nls creatures/*\n\ncreatures/basilisk.dat\ncreatures/minotaur.dat\ncreatures/unicorn.dat"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#create-a-.sh-file",
    "href": "posts/2023-11-02-command-line-part-2/index.html#create-a-.sh-file",
    "title": "Advanced command-line tools",
    "section": "Create a .sh file",
    "text": "Create a .sh file\nLet’s start by going back to proteins/ and creating a new file, middle.sh which will become our shell script:\n\ncd proteins\ntouch middle.sh\n\nWe can open the file and simply insert the following line:\nhead -n 15 octane.pdb | tail -n 5\nThis is a variation on the pipe we constructed earlier:\n\nit selects lines 11-15 of the file octane.pdb.\n\n\n\n\n\n\n\nNote\n\n\n\nWe are not running it as a command just yet: we are putting the commands in a file.\n\n\nWe can see that the directory proteins/ now contains a file called middle.sh.\nOnce we have saved the file, we can ask the shell to execute the commands it contains.\n\ncd proteins\nbash middle.sh"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#file-arguements",
    "href": "posts/2023-11-02-command-line-part-2/index.html#file-arguements",
    "title": "Advanced command-line tools",
    "section": "File arguements",
    "text": "File arguements\nWhat if we want to select lines from an arbitrary file?\nWe could edit middle.sh each time to change the filename, but that would probably take longer than typing the command out again in the shell and executing it with a new file name.\nInstead, let’s edit middle.sh and make it more versatile:\n\nReplace the text octane.pdb with the special variable called $1:\n\nhead -n 15 \"$1\" | tail -n 5\n\n\n\n\n\n\nNote\n\n\n\nInside a shell script, $1 means ‘the first filename (or other argument) on the command line’.\n\n\nWe can now run our script like this:\n\ncd proteins\nbash middle.sh octane.pdb\n\nor on a different file like this:\n\ncd proteins\nbash middle.sh pentane.pdb\n\n\n\n\n\n\n\nPro-tip: double-quotes around arguments\n\n\n\nFor the same reason that we put the loop variable inside double-quotes, in case the filename happens to contain any spaces, we surround $1 with double-quotes.\n\n\nCurrently, we need to edit middle.sh each time we want to adjust the range of lines that is returned.\nLet’s fix that by configuring our script to instead use three command-line arguments.\n\nAfter the first command-line argument ($1), each additional argument that we provide will be accessible via the special variables $1, $2, $3, which refer to the first, second, third command-line arguments, respectively.\n\n\n\n\n\n\n\nQuestion\n\n\n\nKnowing about $1, $2, $3, let’s modify middle.sh such that we can use additional arguments to define the range of lines to be passed to head and tail respectively.\n\n## try it out\n\n\nBy changing the arguments to our command we can change our script’s behaviour:\n\n\n\nThis works, but it may take the next person who reads middle.sh a moment to figure out what it does. We can improve our script by adding some comments at the top of the file:\n# Select lines from the middle of a file.\n# Usage: bash middle.sh filename end_line num_lines\nhead -n \"$2\" \"$1\" | tail -n \"$3\"\n\n\n\n\n\n\nNote\n\n\n\n\nA comment starts with a # character and runs to the end of the line.\nThe computer ignores comments, but they are invaluable for helping people (including your future self) understand and use scripts.\nThe only caveat is that each time you modify the script, you should check that the comment is still accurate: an explanation that sends the reader in the wrong direction is worse than none at all.\n\n\n\nFinally, let’s clean up our space\n\ncd proteins\nrm middle.sh"
  },
  {
    "objectID": "posts/2023-11-02-command-line-part-2/index.html#overview",
    "href": "posts/2023-11-02-command-line-part-2/index.html#overview",
    "title": "Advanced command-line tools",
    "section": "Overview",
    "text": "Overview\nThe SSH protocol uses encryption to secure the connection between a client and a server.\nAll user authentication, commands, output, and file transfers are encrypted to protect against attacks in the network.\nFor details of how the SSH protocol works, see the protocol page. To understand the SSH File Transfer Protocol, see the SFTP page.\n\nYou can read more about setting up your SSH keys to connect to JHPCE here:\n\nhttps://jhpce.jhu.edu/knowledge-base/authentication/ssh-key-setup\nDemo connecting to JHPCE via ssh\n\nYou can read more about setting up your SSH keys to connect to GitHub here:\n\nhttps://docs.github.com/en/authentication/connecting-to-github-with-ssh"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html",
    "href": "posts/2023-10-26-build-website/index.html",
    "title": "Authoring projects and websites with Quarto",
    "section": "",
    "text": "The next lecture falls on 👻 Halloween ! I plan to give the lecture dressed up in a costume. This is entirely optional, but I encourage students to come in costume if you wish! Candy 🍬 will be offered to anyone in costume!"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#introduction-1",
    "href": "posts/2023-10-26-build-website/index.html#introduction-1",
    "title": "Authoring projects and websites with Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto provides a unified authoring framework for data science, combining your code, its results, and your prose.\nQuarto documents are fully reproducible and support dozens of output formats, like PDFs, Word files, presentations, and more.\nQuarto files are designed to be used in three ways:\n\nFor communicating to decision makers, who want to focus on the conclusions, not the code behind the analysis.\nFor collaborating with other data scientists (including future you!), who are interested in both your conclusions, and how you reached them (i.e. the code).\nAs an environment in which to do data science, as a modern day lab notebook where you can capture not only what you did, but also what you were thinking.\n\n\n\n\n\n\n\nImportant\n\n\n\nQuarto is a command line interface tool, not an R package.\nThis means that help is, by-and-large, not available through ? in the R console.\nAnd not to add to the confusion, but there is an quarto R package that has helper functions for you to use in R to e.g. check the Quarto version installed, etc.\n\n\nFormally, Quarto is a publishing system built on Pandoc that allows users to create dynamic content using R, Python, Julia, and ObservableJS (with plans to add more languages too!).\n\n\n\n\n\n\n\n\n\n\n\nArt by Allison Horst. Be sure to check out the rest of Allison’s seriously cute Quarto penguin art in the #rstudioconf2022 keynote talk, Hello Quarto, by Julie Lowndes & Mine Çetinkaya-Rundel!"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#prerequisites",
    "href": "posts/2023-10-26-build-website/index.html#prerequisites",
    "title": "Authoring projects and websites with Quarto",
    "section": "Prerequisites",
    "text": "Prerequisites\nYou need the Quarto command line interface (Quarto CLI), but you don’t need to explicitly install it or load it, as RStudio automatically does both when needed.\n\nhttps://quarto.org/docs/get-started\nhttps://formulae.brew.sh/cask/quarto (this is my preferred way using home brew)"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#qmd-files",
    "href": "posts/2023-10-26-build-website/index.html#qmd-files",
    "title": "Authoring projects and websites with Quarto",
    "section": ".qmd files",
    "text": ".qmd files\nQuarto files end in a .qmd. This is short for quarto markdown.\n\n\n\n\n\n\nNote\n\n\n\nThese files are decoupled from RStudio IDE and there are plugins to work with .qmd files for\n\nVSCode\nJupyterLab\nRStudio\n\n(Quick demo in VSCode)\n\n\n\nRendering\nUse the  Render button in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut (⇧⌘K).\n\n\n\n\n\nIf you prefer to automatically render whenever you save, you can check the Render on Save option on the editor toolbar. The preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF outputs.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDocuments can also be rendered from the R console via the quarto package:\n\n\nCode run in the R Console\n\ninstall.packages(\"quarto\")\nquarto::quarto_render(\"hello.qmd\")\n\nAnd documents can also be rendered from the command line:\n\n\nCode run in the command line\n\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n\n\n\n\nHow rendering works\nWhen you render a Quarto document, first knitr executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output. The markdown file generated is then processed by pandoc, which creates the finished format. The Render button encapsulates these actions and executes them in the right order for you.\n\n\n\n\n\nWhen rendering, Quarto generates a new file that contains selected text, code, and results from the .qmd file. The new file can be an HTML, PDF, MS Word document, presentation, website, book, interactive document, or other format.\n\n\n\nAuthoring\nIn the image below we can see the same document in the two modes of the RStudio editor:\n\nvisual (on the left)\nsource (on the right)\n\nRStudio’s visual editor offers an WYSIWYM authoring experience for markdown. For formatting (e.g. bolding text) you can use the toolbar, a keyboard shortcut (⌘B), or the markdown construct (**bold**).\nYou can toggle back and forth these two modes by clicking on Source and Visual in the editor toolbar (or using the keyboard shortcut ⌘⇧ F4).\n\n\n\n\n\n\n\nHow does multi-language support work?\n\n\n\n\n\n\nQuarto supports multiple languages\n\n\n\nThese languages include\n\nR\nPython\nJulia\nObservable javascript\n\nQuarto can also interchange between languages using Apache Arrow.\n\n\nThe idea behind how quarto supports multi-language code is that the code output is “frozen” after it is rendered.\nIn this way, code output is not recomputed, unless you want it to."
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#r-markdown-vs-quarto",
    "href": "posts/2023-10-26-build-website/index.html#r-markdown-vs-quarto",
    "title": "Authoring projects and websites with Quarto",
    "section": "R Markdown vs Quarto",
    "text": "R Markdown vs Quarto\nSome high-level differences include\n\nStandardized YAML across formats\nDecoupled from RStudio\nMore consistent presentation across formats\nTab Panels\nCode Highlighting\n\n\nCode block options\nAnother noticeable difference are options for code blocks. Rather than being in the header of the code block, options are moved to within the code block using the #| (hash-pipe) for each line.\nThis is a code block for R Markdown:\n```{r setup, include=FALSE}\nlibrary(tidyverse)\nlibrary(tidytext)\n```\nThis is a code block for Quarto:\n```{r}\n#| label: \"setup\"\n#| include: false\nlibrary(tidyverse)\nlibrary(tidytext)\n```\n\n\nOutput Options\nThere are a wide variety of output options available for customizing output from executed code.\nAll of these options can be specified either\n\nglobally (in the document front-matter) or\nper code-block\n\nFor example, here’s a modification of the Python example to specify that we don’t want to “echo” the code into the output document:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\nNote that we can override this option on a per code-block basis. For example:\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\nCode block options available for customizing output include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown).\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output (note that this implies that errors executing code will not halt processing of the document).\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\nHere’s a example with r code blocks and some of these additional options included:\n---\ntitle: \"Knitr Document\"\nexecute:\n  echo: false\n---\n\n```{r}\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{r}\nsummary(airquality)\n```\n\n\n\n\n\n\nTip\n\n\n\nWhen using the Knitr engine, you can also use any of the available native options (e.g. collapse, tidy, comment, etc.).\nSee the Knitr options documentation for additional details. You can include these native options in option comment blocks as shown above, or on the same line as the {r} as shown in the Knitr documentation.\n\n\n\n\nMargin content\nYou can place content within the right margin of Quarto document. For example, here we use the .column-margin class to place an image in the margin:\n::: {.column-margin}\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n:::\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]\n\n\nMargin Figures\nFigures that you create using code blocks can be placed in the margin by using the column: margin code block option.\nIf the code produces more than one figure, each of the figures will be placed in the margin.\n\n```{r}\n#| label: fig-mtcars\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\nFigure 1: MPG vs horsepower, colored by transmission.\n\n\n\n\n\nMargin Tables\nYou an also place tables in the margin of your document by specifying column: margin.\n\n```{r}\n#| column: margin\nknitr::kable(\n  mtcars[1:6, 1:3]\n)\n```\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108\n\n\nHornet 4 Drive\n21.4\n6\n258\n\n\nHornet Sportabout\n18.7\n8\n360\n\n\nValiant\n18.1\n6\n225\n\n\n\n\n\n\nCode line numbers\nIf you want to display line numbers alongside the code block, add the code-line-numbers option. For example:\nformat:\n  html:\n    code-line-numbers: true\nHere’s how a code block with line numbers would display throughout the document:\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\nYou can also enable line numbers for an individual code block using the code-line-numbers attribute.\n\n\nShould you switch to quarto?\n\nShould you switch to Quarto? Not necessarily. If you find R Markdown meets your need, you can definitely stay there. It is not imperative to switch. - Yihui Xie\n\n\n\nhttps://yihui.org/en/2022/04/quarto-r-markdown/"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#project",
    "href": "posts/2023-10-26-build-website/index.html#project",
    "title": "Authoring projects and websites with Quarto",
    "section": "Project",
    "text": "Project\nHere are the general steps for creating a Quarto project:\n\nCreate a new Quarto project\nEdit _quarto.yml file\nAdd / delete relevant content\nRender the project"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#website",
    "href": "posts/2023-10-26-build-website/index.html#website",
    "title": "Authoring projects and websites with Quarto",
    "section": "Website",
    "text": "Website\nHere are the general steps for creating a Quarto website:\n\nCreate a new Quarto project\nEdit _quarto.yml file\nAdd / delete relevant content\nRender the website\nDeploy the website\n\n\n\n\n\n\n\nDeploying a website\n\n\n\nquarto publish can push and update a number of different kinds of webhosts. You will need credentials to publish to each of these.\nquarto publish gh-pages    # GitHub Pages\nquarto publish quarto-pub  # Quarto.pub \nquarto publish netlify     # Netlify\nquarto publish connect     # RStudio Connect"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#freeze-results-and-avoid-recomputing",
    "href": "posts/2023-10-26-build-website/index.html#freeze-results-and-avoid-recomputing",
    "title": "Authoring projects and websites with Quarto",
    "section": "Freeze Results and avoid recomputing",
    "text": "Freeze Results and avoid recomputing\nFreezing code output is generally used when you have either\n\nA large number of collaborators or\nMany computational documents created over a longer period of time\nA project with different types of file formats from different languages (e.g. .qmd, .ipynb, .Rmd)\n\nIn the above cases, it can be challenging to fully re-execute every document when you render the site.\nThis could be because some documents have esoteric or environment-specific requirements (e.g. require access/authentication to a data source) or due to general fragility of dependencies over time.\nUsing freeze ensures that you can always reproducibly render your site.\nThe computational results of documents executed with freeze are stored in the _freeze/ directory, and re-used when needed to fulfill document renders.\nYou should check the contents of _freeze/ into version control so that others rendering the project don’t need to reproduce your computational environment to render it in their environment.\n\n\n\n\n\n\nNote\n\n\n\nYou will still want to take care to fully re-render your project when things outside of source code change (e.g. input data).\nYou can remove previously frozen output by deleting the _freeze folder at the root of your project.\n\n\nFor example, consider the _quarto.yml file.\nOne argument in the file is the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nproject:\n  title: \"qmd_rmd\"\n  type: website\n  output-dir: docs\n  \nexecute:\n  freeze: true  # never re-render during project render\nproject:\n  title: \"qmd_rmd\"\n  type: website\n  output-dir: docs\n\nexecute:\n  freeze: auto  # re-render only when source changes\n\n\n\n\n\n\nNote\n\n\n\nThe freeze option in the _quarto.yml file controls whether execution occurs during global project renders.\nIf you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n\n\nTerminal\n\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles"
  },
  {
    "objectID": "posts/2023-10-26-build-website/index.html#next-steps",
    "href": "posts/2023-10-26-build-website/index.html#next-steps",
    "title": "Authoring projects and websites with Quarto",
    "section": "Next steps",
    "text": "Next steps\nHere are some tutorials I really like for getting started with Quarto generally and for getting started building and deploying websites with Quarto:\n\nCreating Quarto websites\nCustomize Quarto websites"
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Version control (Part 2)\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 3\n\n\nversion control\n\n\ngit\n\n\nGitHub\n\n\n\n\nIntroduction to version control with git and GitHub (part 2)\n\n\n\n\n\n\nNov 9, 2023\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\nVersion control (Part 1)\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 3\n\n\nversion control\n\n\ngit\n\n\nGitHub\n\n\n\n\nIntroduction to version control with git and GitHub (part 1)\n\n\n\n\n\n\nNov 7, 2023\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\nAdvanced command-line tools\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 2\n\n\ncommand-line\n\n\n\n\nDoing more powerful things on the command-line\n\n\n\n\n\n\nNov 2, 2023\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to the command-line\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 2\n\n\ncommand-line\n\n\n\n\nIntroduction to the command-line for data analysis\n\n\n\n\n\n\nOct 31, 2023\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\nAuthoring projects and websites with Quarto\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nwebsites\n\n\nquarto\n\n\n\n\nHello Quarto! Or next-generation literate programming\n\n\n\n\n\n\nOct 26, 2023\n\n\nStephanie Hicks\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Statistical Programming Paradigms and Workflows!",
    "section": "",
    "text": "Welcome to Statistical Programming Paradigms and Workflows at Johns Hopkins Bloomberg School of Public Health!"
  },
  {
    "objectID": "index.html#what-is-this-course",
    "href": "index.html#what-is-this-course",
    "title": "Welcome to Statistical Programming Paradigms and Workflows!",
    "section": "What is this course?",
    "text": "What is this course?\nThis course covers advanced statistical computing programming paradigms and workflows required for the research and application of statistical methods. Includes the basics of programming in unix and/or using command-line tools, introduction to version control, advanced R and tidyverse skills, introduction to creating R packages with documentation, working with relational databases, introduction to functional programming, getting and using data from APIs, introduction to Shiny and dashboards. Topics in statistical data analysis provide working examples."
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Welcome to Statistical Programming Paradigms and Workflows!",
    "section": "Getting started",
    "text": "Getting started\nI suggest that you start by looking over the Syllabus and Schedule under General Information. After that, start with the Lectures content in the given order."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Welcome to Statistical Programming Paradigms and Workflows!",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis course was developed and is maintained by Stephanie Hicks.\nThe following individuals have contributed to improving the course or materials have been adapted from their courses: Roger D. Peng, Andreas Handel, Naim Rashid, Michael Love.\nThe image above was generated with aRtsy.\nThe course materials are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Linked and embedded materials are governed by their own licenses. I assume that all external materials used or embedded here are covered under the educational fair use policy. If this is not the case and any material displayed here violates copyright, please let me know and I will remove it."
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html",
    "href": "posts/2023-10-31-command-line-part-1/index.html",
    "title": "Introduction to the command-line",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nSoftware Carpentry: The Unix Shell\nR Squared Academy\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nR Squared Academy\nSoftware Carpentry: The Unix Shell\nData Science at the Command line"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#the-shell",
    "href": "posts/2023-10-31-command-line-part-1/index.html#the-shell",
    "title": "Introduction to the command-line",
    "section": "The Shell",
    "text": "The Shell\nThe shell is a program (or environment) where users can type commands and the commands can be executed.\nAnother way of thinking about it is, a shell provides an interface between the user and the UNIX system.\n\n\n\n\n\n\nExample types of shells\n\n\n\n\nBash (Bourne Again SHell). The most popular Unix shell is Bash (the Bourne Again SHell — so-called because it’s derived from a shell written by Stephen Bourne). Bash is the default shell on most modern implementations of Unix and in most packages that provide Unix-like tools for Windows.\nZsh (Z SHell). Zsh is built on top of bash with some additional features including providing the user with more flexibility by providing various features such as plug-in support, better customization, theme support, spelling correction, etc. Zsh is the default shell for macOS and Kali Linux.\n\n\n\nThe grammar of a shell allows you to combine existing tools into powerful pipelines and handle large volumes of data automatically.\nBenefits:\n\nSequences of commands can be written into a script, improving the reproducibility of workflows.\nThe command line is often the easiest way to interact with remote machines and supercomputers.\nFamiliarity with the shell is near essential to run a variety of specialized tools and resources including high-performance computing systems.\n\nLet’s get started."
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#where-to-find-the-shell",
    "href": "posts/2023-10-31-command-line-part-1/index.html#where-to-find-the-shell",
    "title": "Introduction to the command-line",
    "section": "Where to find the shell",
    "text": "Where to find the shell\n\nIf you are using Windows, by default, Windows does not use bash, but instead you will need to install one of several Windows-specific tools (like Git for Windows or PowerShell) to allow this kind of text-based interaction with your operating system.\nIf you are using macOS, Apple calls the shell ‘Terminal’. There is an application you can open called ‘Terminal’ and it also appears in a tab next to the R console in the RStudio IDE.\n\n\n[Source]\n\n\n\n\n\n\nDemo\n\n\n\n\nLet’s open up the Terminal application and also show you where the Terminal is within RStudio.\nNext, let’s show how to open up multiple terminals and close all terminals.\n\n\n\n\n\n\n\n\n\nThe Unix shell setup\n\n\n\nYou can follow these directions for setting up your shell for Windows, macOS, and Linux operating systems:\n\nhttps://swcarpentry.github.io/shell-novice/index.html"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#opening-the-shell",
    "href": "posts/2023-10-31-command-line-part-1/index.html#opening-the-shell",
    "title": "Introduction to the command-line",
    "section": "Opening the shell",
    "text": "Opening the shell\nWhen the shell is first opened, you are presented with a prompt, indicating that the shell is waiting for input.\n\n\nBash\n\n$\n\n\n\nZsh\n\n%\n\nThe shell typically uses $ as the prompt, but may use a different symbol (for the purposes of the rest of the lecture, I will omit the $).\n\n\n\n\n\n\nImportant\n\n\n\n\nWhen typing commands in the shell, do not type the $, only the commands that follow it.\nAfter you type a command, you have to press the Enter key to execute it.\n\n\n\nThe prompt is followed by a text cursor, a character that indicates the position where your typing will appear."
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#shell-basics",
    "href": "posts/2023-10-31-command-line-part-1/index.html#shell-basics",
    "title": "Introduction to the command-line",
    "section": "Shell basics",
    "text": "Shell basics\nSo let’s try our first command, ls which is short for listing files. With R, we know how to do this with list.files() function in base R:\n\n```{r}\nlist.files()\n```\n\n [1] \"analysis.R\"           \"combined_names.txt\"   \"index.qmd\"           \n [4] \"index.rmarkdown\"      \"package_names.txt\"    \"r_release.txt\"       \n [7] \"release_names.txt\"    \"secret_directory\"     \"soccer_directory\"    \n[10] \"team_standings_3.csv\" \"team_standings.csv\"  \n\n\nThis command will list the contents of the current directory where the lecture is located. In RStudio, we can write a bash code block like this:\n```{bash}\nls\n```\nand the executed code block is this:\n\nls\n\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the shell can’t find a program whose name is the command you typed, it will print an error message such as:\n\nks\n\nError in running command bash\n\n\nThis might happen if the command was mis-typed or if the program corresponding to that command is not installed.\n\n\nNext, lets learn to display\n\nbasic information about the user\nthe current date & time\nthe calendar\nand clear the screen\n\n\n\n\n\n\n\n\n\nCommand\nDescription\nR command\n\n\n\n\nwhoami\nWho is the user?\nSys.info() / whoami::whoami()\n\n\ndate\nGet date, time and timezone\nSys.time()\n\n\ncal\nDisplay calendar\n\n\n\nclear\nClear the screen\nCtrl + L\n\n\n\nwhoami prints the user id (i.e. the name of the user who runs the command). Use it to verify the user as which you are logged into the system.\n\nwhoami\n\nstephaniehicks\n\n\ndate will display or change the value of the system’s time and date information.\n\ndate\n\nTue Oct 31 12:48:54 EDT 2023\n\n\ncal will display a formatted calendar and clear will clear all text on the screen and display a new prompt.\n\ncal\n\n    October 2023      \nSu Mo Tu We Th Fr Sa  \n 1  2  3  4  5  6  7  \n 8  9 10 11 12 13 14  \n15 16 17 18 19 20 21  \n22 23 24 25 26 27 28  \n29 30 _\b3_\b1              \n                      \n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nTo clear the R console and the shell, we use Ctrl + L."
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#getting-help",
    "href": "posts/2023-10-31-command-line-part-1/index.html#getting-help",
    "title": "Introduction to the command-line",
    "section": "Getting help",
    "text": "Getting help\nBefore we proceed further, let us learn to view the documentation/manual pages of the commands.\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nnameofcommand -h\nFor some nameofcommand command (only for some commands)\n\n\nman nameofcommand\nDisplay manual pages (i.e. man) for the nameofcommand command\n\n\nwhatis\nSingle line description of a command\n\n\n\nman is used to view the system’s reference manual.\nman date \nDATE(1)                          General Commands Manual                          DATE(1)\n\nNAME\n     date – display or set date and time\n\nSYNOPSIS\n     date [-jnRu] [-r seconds | filename] [-v [+|-]val[ymwdHMS]] ... [+output_fmt]\n     date [-ju] [[[mm]dd]HH]MM[[cc]yy][.ss]\n     date [-jRu] -f input_fmt new_date [+output_fmt]\n     date [-jnu] [-I[FMT]] [-f input_fmt] [-r ...] [-v ...] [new_date]\n\nDESCRIPTION\n     When invoked without arguments, the date utility displays the current date and time.\n\n\n\n\n\n\nTry it out\n\n\n\nLet’s explore the manual pages of date in the command line to show you what that looks like.\n\nWe will figure out what is the argument to print the date since the Unix epoch or 00:00:00 UTC on 1 January 1970 as a function of the number of seconds.\nWe will figure out what is the argument to display the date in UTC.\n\n\n## try it out \n\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nFor most commands (but not all!), NAMEOFCOMMAND -h or NAMEOFCOMMAND --help will bring up a small guide to command options.\nFor example, python -h or python --help bring up:\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-b     : issue warnings about str(bytes_instance), str(bytearray_instance)\n         and comparing bytes/bytearray with str. (-bb: issue errors)\n-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x\n-c cmd : program passed in as string (terminates option list)\n-d     : turn on parser debugging output (for experts only, only works on\n         debug builds); also PYTHONDEBUG=x\n-E     : ignore PYTHON* environment variables (such as PYTHONPATH)\n-h     : print this help message and exit (also --help)\n-i     : inspect interactively after running script; forces a prompt even\n         if stdin does not appear to be a terminal; also PYTHONINSPECT=x"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#navigate-the-file-system",
    "href": "posts/2023-10-31-command-line-part-1/index.html#navigate-the-file-system",
    "title": "Introduction to the command-line",
    "section": "Navigate the file system",
    "text": "Navigate the file system\nNext, we will introduce commands that help us:\n\nnavigate between different folders/directories\nreturn current working directory\nlist all the files & folders in a directory\ncreate and delete directories\n\n\n\n\n\n\n\n\n\nCommand\nDescription\nR commands\n\n\n\n\npwd\nPrint working directory\nhere::here()\n\n\nls\nList directory contents\ndir() / list.files() / list.dirs()\n\n\ncd\nChange current working directory\nsetwd()\n\n\nmkdir\nCreate directory\ndir.create()\n\n\nrmdir\nRemove/delete directory\n\n\n\n\npwd displays the name and path of the present (or current) working directory (pwd).\n\npwd\n\n/Users/stephaniehicks/Documents/github/teaching/jhustatprogramming2023/posts/2023-10-31-command-line-part-1\n\n\nls displays information about files and directories in the current directory along with their associated metadata such as\n\nsize\nownership\nmodification date\n\nWith no options, it will list the files and directories in the current directory, sorted alphabetically.\n\nls\n\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n\n\ncd (change directory) changes the current working directory. It is among the most used commands as it allows the user to move around the file system.\n\ncd .. \nls\n\n2023-10-26-build-website\n2023-10-31-command-line-part-1\n2023-11-02-command-line-part-2\n2023-11-07-version-control-part-1\n2023-11-09-version-control-part-2\n2023-11-14-oop-part-1\n2023-11-16-oop-part-2\n2023-11-28-purrr-fun-programming\n2023-11-30-pkgdown-pkg-website\n2023-11-30-targets-proj-workflows\n2023-12-05-gettingdata-api\n2023-12-07-relational-databases\n_metadata.yml\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe cd .. means to change to the directory that is one level up.\n\n\nmkdir will create new directory.\nIt will allow you to set file mode (permissions associated with the directory) i.e. who can open/modify/delete the directory.\nIt will give you a warning if a folder already exists.\n\nmkdir secret_directory\nls\n\nmkdir: secret_directory: File exists\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nPressing tab at any time within the shell will prompt it to attempt to either\n\nauto-complete the name of the command you are searching for\nauto-complete the line based on the files or sub-directories in the current directory.\n\nWhere two or more files have the same characters, the auto-complete will only fill up to the first point of difference, after which we can add more characters, and try using tab again.\n\n\nrmdir will remove empty directories from the file system. It can be used to remove multiple empty directories as well.\nIf the directory is not empty, rmdir will not remove it and instead display a warning that the directory is not empty.\n\nrmdir secret_directory\nls\n\nrmdir: secret_directory: Directory not empty\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#change-working-directory",
    "href": "posts/2023-10-31-command-line-part-1/index.html#change-working-directory",
    "title": "Introduction to the command-line",
    "section": "Change working directory",
    "text": "Change working directory\nLet us focus a bit more on changing working directory. The below table shows commands for changing working directory to\n\nup one level\nprevious working directory\nhome directory\nand root directory\n\n\n\n\nCommand\nDescription\n\n\n\n\ncd .\nNavigate into directory\n\n\ncd ..\nGo up one level\n\n\ncd -\nGo to previous working directory\n\n\ncd ~\nChange directory to home directory\n\n\ncd /\nChange directory to root directory\n\n\n\n\ncd ..\nls \n\n2023-10-26-build-website\n2023-10-31-command-line-part-1\n2023-11-02-command-line-part-2\n2023-11-07-version-control-part-1\n2023-11-09-version-control-part-2\n2023-11-14-oop-part-1\n2023-11-16-oop-part-2\n2023-11-28-purrr-fun-programming\n2023-11-30-pkgdown-pkg-website\n2023-11-30-targets-proj-workflows\n2023-12-05-gettingdata-api\n2023-12-07-relational-databases\n_metadata.yml\n\n\nThis is a list of top-level files in my folder containing all the files for this website.\n\ncd ../..\nls\n\nREADME.md\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\ndata\nimages\nindex.qmd\njhustatprogramming2023.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n\n\nThese are all the files in my home directory on my computer.\n\ncd ~ \nls \n\nApplications\nCreative Cloud Files\nDesktop\nDocuments\nDownloads\nDropbox\nLibrary\nMovies\nMusic\nPictures\nPublic\nR\nZotero\nminiforge3"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#list-directory-contents",
    "href": "posts/2023-10-31-command-line-part-1/index.html#list-directory-contents",
    "title": "Introduction to the command-line",
    "section": "List directory contents",
    "text": "List directory contents\nls will list the contents of a directory. Using different arguments, we can\n\nlist hidden files\nview file permissions, ownership, size & modification date\nsort by size & modification date\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nls\nList directory contents\n\n\nls -l\nList files one per line\n\n\nls -a\nList all files including hidden files\n\n\nls -la\nDisplay file permissions, ownership, size & modification date\n\n\nls -lh\nLong format list with size displayed in human readable format\n\n\nls -lS\nLong format list sorted by size\n\n\nls -ltr\nLong format list sorted by modification date\n\n\n\nList files one per line\n\ncd ../..\nls -l\n\ntotal 240\n-rw-r--r--@  1 stephaniehicks  staff    354 Oct 24 18:03 README.md\ndrwxr-xr-x   7 stephaniehicks  staff    224 Oct 24 18:30 _freeze\n-rw-r--r--   1 stephaniehicks  staff    976 Aug 14 21:48 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff    901 Aug 14 21:48 _quarto.yml\ndrwxr-xr-x  15 stephaniehicks  staff    480 Oct 31 12:48 _site\ndrwxr-xr-x   8 stephaniehicks  staff    256 Aug 14 21:48 data\ndrwxr-xr-x  17 stephaniehicks  staff    544 Oct 29 23:54 images\n-rw-r--r--   1 stephaniehicks  staff   2200 Aug 14 21:48 index.qmd\n-rw-r--r--@  1 stephaniehicks  staff    205 Oct 31 12:35 jhustatprogramming2023.Rproj\n-rw-r--r--   1 stephaniehicks  staff    189 Aug 14 21:48 lectures.qmd\ndrwxr-xr-x  15 stephaniehicks  staff    480 Oct 30 00:20 posts\n-rw-r--r--   1 stephaniehicks  staff  60521 Aug 14 21:48 profile.jpg\ndrwxr-xr-x   3 stephaniehicks  staff     96 Sep  6 13:09 projects\n-rw-r--r--   1 stephaniehicks  staff    191 Aug 14 21:48 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff    501 Aug 14 21:48 resources.qmd\n-rw-r--r--@  1 stephaniehicks  staff   3591 Oct 30 00:12 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff     17 Aug 14 21:48 styles.css\n-rw-r--r--@  1 stephaniehicks  staff  18899 Oct 30 01:38 syllabus.qmd\n\n\n\nHidden files\nNext, let’s talk about hidden (or invisible) files. These are everywhere on modern operating systems.\nWhen a programmer needs to have a file or folder, but does not want to show it to the user, they prefixes the file name with a single period (.). The operating system then hides this files from the user.\nBut now you can see these invisible files using the command line. Just use the -a flag (short for “all”) for the ls command to have it show you all the files that are there:\n\ncd ../..\nls -a\n\n.\n..\n.Rproj.user\n.git\n.github\n.gitignore\n.quarto\nREADME.md\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\ndata\nimages\nindex.qmd\njhustatprogramming2023.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n\n\nYes, we have lots of hidden files and folders in our course repository: .git, .github, .gitignore, .quarto, etc.\nThese are normal files — you can move them, rename them, or open them like any other — they are just hidden by default.\nNext, we can display file permissions, ownership, size & modification date\n\ncd ../..\nls -la\n\ntotal 248\ndrwxr-xr-x@ 25 stephaniehicks  staff    800 Oct 31 12:48 .\ndrwxr-xr-x@ 16 stephaniehicks  staff    512 Aug 14 13:25 ..\ndrwxr-xr-x   4 stephaniehicks  staff    128 Aug  9  2022 .Rproj.user\ndrwxr-xr-x  14 stephaniehicks  staff    448 Oct 31 12:48 .git\ndrwxr-xr-x   3 stephaniehicks  staff     96 Aug 14 21:48 .github\n-rw-r--r--   1 stephaniehicks  staff     99 Aug 14 21:48 .gitignore\ndrwxr-xr-x   8 stephaniehicks  staff    256 Oct 31 12:47 .quarto\n-rw-r--r--@  1 stephaniehicks  staff    354 Oct 24 18:03 README.md\ndrwxr-xr-x   7 stephaniehicks  staff    224 Oct 24 18:30 _freeze\n-rw-r--r--   1 stephaniehicks  staff    976 Aug 14 21:48 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff    901 Aug 14 21:48 _quarto.yml\ndrwxr-xr-x  15 stephaniehicks  staff    480 Oct 31 12:48 _site\ndrwxr-xr-x   8 stephaniehicks  staff    256 Aug 14 21:48 data\ndrwxr-xr-x  17 stephaniehicks  staff    544 Oct 29 23:54 images\n-rw-r--r--   1 stephaniehicks  staff   2200 Aug 14 21:48 index.qmd\n-rw-r--r--@  1 stephaniehicks  staff    205 Oct 31 12:35 jhustatprogramming2023.Rproj\n-rw-r--r--   1 stephaniehicks  staff    189 Aug 14 21:48 lectures.qmd\ndrwxr-xr-x  15 stephaniehicks  staff    480 Oct 30 00:20 posts\n-rw-r--r--   1 stephaniehicks  staff  60521 Aug 14 21:48 profile.jpg\ndrwxr-xr-x   3 stephaniehicks  staff     96 Sep  6 13:09 projects\n-rw-r--r--   1 stephaniehicks  staff    191 Aug 14 21:48 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff    501 Aug 14 21:48 resources.qmd\n-rw-r--r--@  1 stephaniehicks  staff   3591 Oct 30 00:12 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff     17 Aug 14 21:48 styles.css\n-rw-r--r--@  1 stephaniehicks  staff  18899 Oct 30 01:38 syllabus.qmd\n\n\nDisplay size in human readable format\n\ncd ../..\nls -lh\n\ntotal 240\n-rw-r--r--@  1 stephaniehicks  staff   354B Oct 24 18:03 README.md\ndrwxr-xr-x   7 stephaniehicks  staff   224B Oct 24 18:30 _freeze\n-rw-r--r--   1 stephaniehicks  staff   976B Aug 14 21:48 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff   901B Aug 14 21:48 _quarto.yml\ndrwxr-xr-x  15 stephaniehicks  staff   480B Oct 31 12:48 _site\ndrwxr-xr-x   8 stephaniehicks  staff   256B Aug 14 21:48 data\ndrwxr-xr-x  17 stephaniehicks  staff   544B Oct 29 23:54 images\n-rw-r--r--   1 stephaniehicks  staff   2.1K Aug 14 21:48 index.qmd\n-rw-r--r--@  1 stephaniehicks  staff   205B Oct 31 12:35 jhustatprogramming2023.Rproj\n-rw-r--r--   1 stephaniehicks  staff   189B Aug 14 21:48 lectures.qmd\ndrwxr-xr-x  15 stephaniehicks  staff   480B Oct 30 00:20 posts\n-rw-r--r--   1 stephaniehicks  staff    59K Aug 14 21:48 profile.jpg\ndrwxr-xr-x   3 stephaniehicks  staff    96B Sep  6 13:09 projects\n-rw-r--r--   1 stephaniehicks  staff   191B Aug 14 21:48 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff   501B Aug 14 21:48 resources.qmd\n-rw-r--r--@  1 stephaniehicks  staff   3.5K Oct 30 00:12 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff    17B Aug 14 21:48 styles.css\n-rw-r--r--@  1 stephaniehicks  staff    18K Oct 30 01:38 syllabus.qmd\n\n\n\n\nWildcards\nWildcards are the use of asterisk (*) to allow any pattern to appear in part of a filename.\nFor example, to list all the .txt files in a folder (but only the .txt files), you can type:\n\nls *.txt\n\ncombined_names.txt\npackage_names.txt\nr_release.txt\nrelease_names.txt\n\n\nOr if you wanted to see any file in the directory that has a “r” in it\n\nls *r*\n\nindex.rmarkdown\nr_release.txt\nrelease_names.txt\n\nsecret_directory:\nteam_standings.csv\n\nsoccer_directory:\nteam_standings.csv\n\n\nThis is an extremely powerful tool, and one you will likely use a lot.\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s try to write the command to pattern match all files that start with the pattern “team”\n\n### try it out"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#create-new-file",
    "href": "posts/2023-10-31-command-line-part-1/index.html#create-new-file",
    "title": "Introduction to the command-line",
    "section": "Create new file",
    "text": "Create new file\ntouch modifies file timestamps which is information associated with file modification. It can be any of the following:\n\naccess time (the last time the file was read)\nmodification time (the last time the contents of the file was changed)\nchange time (the last time the file’s metadata was changed)\n\nIf the file does not exist, it will create an empty file of the same name.\n\n\n\n\n\n\nExample\n\n\n\nLet us use touch to create a new file secret_analysis.R.\n\ntouch secret_analysis.R\nls\n\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#copy-files-and-folders",
    "href": "posts/2023-10-31-command-line-part-1/index.html#copy-files-and-folders",
    "title": "Introduction to the command-line",
    "section": "Copy files and folders",
    "text": "Copy files and folders\ncp makes copies of files and directories.\n\n\n\n\n\n\nNote\n\n\n\nBy default, it will overwrite files without prompting for confirmation so be cautious while copying files or folders.\n\n\n\n\n\n\n\n\nExample\n\n\n\nLet us create a copy of team_standings.csv file and name it as team_standings_2.csv in the same folder.\n\ncp team_standings.csv team_standings_2.csv\nls\n\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_2.csv\nteam_standings_3.csv\n\n\n\n\nTo copy folders, you use the -r option which refers to --recursive i.e. copy directories recursively.\n\ncp -r secret_directory secret_directory_2\nls secret*\n\nsecret_analysis.R\n\nsecret_directory:\nteam_standings.csv\n\nsecret_directory_2:\nteam_standings.csv"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#move-and-rename-files",
    "href": "posts/2023-10-31-command-line-part-1/index.html#move-and-rename-files",
    "title": "Introduction to the command-line",
    "section": "Move and rename files",
    "text": "Move and rename files\nmv moves and renames files and directories. Using different options, we can ensure\n\nfiles are not overwritten\nuser is prompted for confirmation before overwriting files\ndetails of files being moved is displayed\n\n\n\n\nCommand\nDescription\n\n\n\n\nmv\nMove or rename files/directories\n\n\nmv -f\nDo not prompt for confirmation before overwriting files\n\n\nmv -i\nPrompt for confirmation before overwriting files\n\n\nmv -n\nDo not overwrite existing files\n\n\nmv -v\nMove files in verbose mode\n\n\n\nLet us move/rename the team_standings_2.csv file to team_standings_3.csv in verbose mode.\n\nmv -v team_standings_2.csv team_standings_3.csv\nls team*\n\nteam_standings_2.csv -&gt; team_standings_3.csv\nteam_standings.csv\nteam_standings_3.csv\n\n\nWe see that there is no more file called team_standings_2.csv as it’s now been renamed!"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#removedelete-files",
    "href": "posts/2023-10-31-command-line-part-1/index.html#removedelete-files",
    "title": "Introduction to the command-line",
    "section": "remove/delete files",
    "text": "remove/delete files\nThe rm command is used to delete/remove files & folders. Using additional options, we can\n\nremove directories & sub-directories\nforcibly remove directories\ninteractively remove multiple files\ndisplay information about files removed/deleted\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nrm\nRemove files/directories\n\n\nrm -r\nRecursively remove a directory & all its subdirectories\n\n\nrm -rf\nForcibly remove directory without prompting for confirmation or showing error messages\n\n\nrm -i\nInteractively remove multiple files, with a prompt before every removal\n\n\nrm -v\nRemove files in verbose mode, printing a message for each removed file\n\n\n\nLet’s remove the secret_analysis.R file that we created earlier with the touch command.\n\nrm secret_analysis.R\nls\n\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsecret_directory_2\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n\n\nTo remove a folder (and all of it’s contents), we need to use recursive deletion with -r\n\nrm -r secret_directory_2\nls\n\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#display-messages",
    "href": "posts/2023-10-31-command-line-part-1/index.html#display-messages",
    "title": "Introduction to the command-line",
    "section": "Display messages",
    "text": "Display messages\nThe echo command prints text to the terminal.\nIt can be used for writing or appending messages to a file as well.\n\n\n\nCommand\nDescription\n\n\n\n\necho\nDisplay messages\n\n\necho -n\nPrint message without trailing new line\n\n\necho &gt; file\nWrite message to a file\n\n\necho -e\nEnable interpretation of special characters\n\n\n\nLet us start with a simple example. We will print the text “Funny-Looking Kid” to the terminal. It is the release name for R version 4.2.1.\n\necho Funny-looking Kid\n\nFunny-looking Kid\n\n\nIf we wanted to redirect that output from printing to the terminal and write to a file, we use the redirection (&gt;) operator.\n\necho Funny-looking Kid &gt; r_release.txt\ncat r_release.txt\n\nFunny-looking Kid\n\n\n\n\n\n\n\n\nRedirection operator\n\n\n\nIf we want to redirect that output from printing to the terminal and write to a file, we use the &gt; operator like so (command &gt; [file]) where on the left side is output gets piped into a file on the right side."
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#the-path-variable",
    "href": "posts/2023-10-31-command-line-part-1/index.html#the-path-variable",
    "title": "Introduction to the command-line",
    "section": "The PATH variable",
    "text": "The PATH variable\nAn important feature of the command line is the PATH variable.\nI won’t get into all the details about the PATH variable, but having a basic understanding will likely prove useful if you ever have to troubleshoot problems in the future.\n\nHave you ever wondered how the command-line knows what to do when you type a command like python or ls?\nHow does it know what program to run, especially on a computer that might have multiple installations of a program like Python?\n\nThe answer is that your system has a list of folders stored in an “environment variable” called PATH.\nWhen you run a command (like python or ls), it goes through those folders in order until it finds an executable file with the name of the command you typed.\nThen, when it finds that file, it executes that program and stops looking.\nYou can see the value of the PATH variable on your computer by typing\n\necho $PATH\n\n/Library/Frameworks/R.framework/Resources/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/X11/bin:/Library/TeX/texbin:/Applications/quarto/bin:/Library/Frameworks/R.framework/Resources/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/opt/homebrew/Caskroom/miniforge/base/bin:/opt/homebrew/Caskroom/miniforge/base/condabin:/Users/stephaniehicks/Applications/quarto/bin:/usr/texbin:/Applications/RStudio.app/Contents/Resources/app/bin/postback\n\n\nThat means that when I type python, my computer will first look in the folder /Applications/quarto/bin to see if there is a file named python it can run. If it can’t find one there, it moves on to to the next one.\n\nWhy is this useful\nIn a perfect world, you will never have to worry about your PATH variable, but there are a couple situations where knowing about your PATH variable can be helpful. In particular:\n\nIf you downloaded a program, but you cannot run it from the command line, that probably means that its location is not in the PATH variable.\nIf you find that when you type a command like python, the command line is not running the version of python you want it to run, that’s probably because a different version of python appears earlier in the PATH variable (since the command line will stop looking through these folders as soon as it finds a match).\n\n\n\n\n\n\n\nNote\n\n\n\nYou can diagnose this problem by typing which COMMANDNAME, which will tell you the folder from which COMMANDNAME is being run.\n\nwhich python\n\n/opt/homebrew/Caskroom/miniforge/base/bin/python\n\n\n\nwhich ls\n\n/bin/ls"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#print-file-contents",
    "href": "posts/2023-10-31-command-line-part-1/index.html#print-file-contents",
    "title": "Introduction to the command-line",
    "section": "Print file contents",
    "text": "Print file contents\nThe cat (stands for catenate) command reads data from files, and outputs (or prints) their contents to the screen.\n\n\n\n\n\n\nExample\n\n\n\nLet’s consider the release_names.txt file, which contains release names of different R versions.\nIf we wanted to print the file contents to the screen:\n\ncat release_names.txt\n\nUnsuffered Consequences\nGreat Pumpkin\nDecember Snowflakes\nGift-Getting Season\nEaster Beagle\nRoasted Marshmallows\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n\n\n\n\nIf we wanted to number all the output, use the -n option:\n\ncat -n release_names.txt \n\n     1  Unsuffered Consequences\n     2  Great Pumpkin\n     3  December Snowflakes\n     4  Gift-Getting Season\n     5  Easter Beagle\n     6  Roasted Marshmallows\n     7  Trick or Treat\n     8  Security Blanket\n     9  Masked Marvel\n    10  Good Sport\n    11  Frisbee Sailing\n    12  Warm Puppy\n    13  Spring Dance\n    14  Sock it to Me\n    15  Pumpkin Helmet\n    16  Smooth Sidewalk\n    17  Full of Ingredients\n    18  World-Famous Astronaut\n    19  Fire Safety\n    20  Wooden Christmas Tree\n    21  Very Secure Dishes\n    22  Very, Very Secure Dishes\n    23  Supposedly Educational\n    24  Bug in Your Hair\n    25  Sincere Pumpkin Patch\n    26  Another Canoe\n    27  You Stupid Darkness\n    28  Single Candle\n    29  Short Summer\n    30  Kite Eating Tree\n\n\nTo concatenate several source (or input) files into one final target (or output) file, we can also use the redirect operator (&gt;):\n\ncat r_release.txt release_names.txt &gt; combined_names.txt\ncat combined_names.txt\n\nFunny-looking Kid\nUnsuffered Consequences\nGreat Pumpkin\nDecember Snowflakes\nGift-Getting Season\nEaster Beagle\nRoasted Marshmallows\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n\n\n\nThe head command will display the first 10 lines of a file(s) by default.\nThe tail command displays the last 10 lines of a file(s) by default.\n\nIt can be used to display the first (or last) few lines or bytes of a file as well.\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nhead\nOutput the first parts of a file\n\n\nhead -n num\nOutput the first num lines of a file\n\n\nhead -c num\nOutput the first num bytes of a file\n\n\ntail\nDisplay the last part of a file\n\n\ntail -n num\nShow the last num lines of a file\n\n\ntail -n +num\nShow all contents of the file starting from num line\n\n\ntail -c num\nShow last num bytes of a file\n\n\n\nTo show the head of the first 8 lines of the combined_names.txt file:\n\nhead -c 8 combined_names.txt \n\nFunny-lo\n\n\nTo show all the lines starting from line 8 and beyond:\n\ntail -n +8 combined_names.txt \n\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n\n\nThe more command displays text, one screen at a time. It opens a file for\n\ninteractive reading\nscrolling\nsearching\n\n\n\n\n\n\n\nTip\n\n\n\nPress space to scroll down the page, the forward slash (/) for searching strings, n to go to the next match, and q to quit.\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nmore\nOpen a file for interactive reading, scrolling and searching\n\n\nspace\nPage down\n\n\n/\nSearch for a string; press n to go the next match\n\n\nq\nQuit\n\n\n\nThe less command is similar to more, but offers more features.\nIt allows the user to scroll up and down the file, go to the beginning and end of the file, forward and backward search and the ability to go the next and previous match while searching the file.\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nless\nOpen a file for interactive reading, scrolling and searching\n\n\nspace\nPage down\n\n\nb\nPage up\n\n\nG\nGo to the end of file\n\n\ng\nGo to the start of file\n\n\n/\nForward search\n\n\n?\nBackward search\n\n\nn\nGo to next match\n\n\nN\nGo to previous match\n\n\nq\nQuit"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#sort-files",
    "href": "posts/2023-10-31-command-line-part-1/index.html#sort-files",
    "title": "Introduction to the command-line",
    "section": "Sort files",
    "text": "Sort files\nThe sort command will sort the contents of text file, line by line. Using additional options, we can\n\nsort a file in ascending/descending order\nignore case while sorting\nuse numeric order for sorting\npreserve only unique lines while sorting\n\n\n\n\n\n\n\nTip\n\n\n\nUsing the sort command, the contents can be sorted numerically and alphabetically. By default, the rules for sorting are:\n\nlines starting with a number will appear before lines starting with a letter.\nlines starting with a letter that appears earlier in the alphabet will appear before lines starting with a letter that appears later in the alphabet.\nlines starting with a lowercase letter will appear before lines starting with the same letter in uppercase.\n\n\n\nUsing additional options, the rules for sorting can be changed. We list the options in the below table.\n\n\n\nCommand\nDescription\n\n\n\n\nsort\nSort lines of text files\n\n\nsort -r\nSort a file in descending order\n\n\nsort --ignore-case\nIgnore case while sorting\n\n\nsort -n\nUse numeric order for sorting\n\n\nsort -u\nPreserve only unique lines while sorting\n\n\n\nHere we are sorting in a descending alphabetical order of the combined_names.txt\n\nsort -r combined_names.txt\n\nYou Stupid Darkness\nWorld-Famous Astronaut\nWooden Christmas Tree\nWarm Puppy\nVery, Very Secure Dishes\nVery Secure Dishes\nUnsuffered Consequences\nTrick or Treat\nSupposedly Educational\nSpring Dance\nSock it to Me\nSmooth Sidewalk\nSingle Candle\nSincere Pumpkin Patch\nShort Summer\nSecurity Blanket\nRoasted Marshmallows\nPumpkin Helmet\nMasked Marvel\nKite Eating Tree\nGreat Pumpkin\nGood Sport\nGift-Getting Season\nFunny-looking Kid\nFull of Ingredients\nFrisbee Sailing\nFire Safety\nEaster Beagle\nDecember Snowflakes\nBug in Your Hair\nAnother Canoe"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#count-length-of-file",
    "href": "posts/2023-10-31-command-line-part-1/index.html#count-length-of-file",
    "title": "Introduction to the command-line",
    "section": "Count length of file",
    "text": "Count length of file\nwc (word count) will print newline, word, and byte counts for file(s).\n\nwc combined_names.txt\n\n      31      75     564 combined_names.txt\n\n\n\nwc -l combined_names.txt\n\n      31 combined_names.txt\n\n\n\nwc -w combined_names.txt\n\n      75 combined_names.txt\n\n\n\nwc -c combined_names.txt\n\n     564 combined_names.txt\n\n\nIf more than one file is specified, it will also print total line.\n\nwc combined_names.txt package_names.txt\n\n      31      75     564 combined_names.txt\n     108     216    1498 package_names.txt\n     139     291    2062 total"
  },
  {
    "objectID": "posts/2023-10-31-command-line-part-1/index.html#search-for-a-string-in-a-file",
    "href": "posts/2023-10-31-command-line-part-1/index.html#search-for-a-string-in-a-file",
    "title": "Introduction to the command-line",
    "section": "Search for a string in a file",
    "text": "Search for a string in a file\nThe grep command is used for pattern matching. Along with additional options, it can be used to\n\nmatch pattern in input text\nignore case\nsearch recursively for an exact string\nprint filename and line number for each match\ninvert match for excluding specific strings\n\ngrep (stands for global regular expression) processes text line by line, and prints any lines which match a specified pattern.\nIt is a powerful tool for matching a regular expression against text in a file, multiple files, or a stream of input.\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngrep\nMatches pattern in input text\n\n\ngrep -i\nIgnore case\n\n\ngrep -RI\nSearch recursively for an exact string\n\n\ngrep -E\nUse extended regular expression\n\n\ngrep -Hn\nPrint file name & corresponding line number for each match\n\n\ngrep -v\nInvert match for excluding specific strings\n\n\n\nFirst, we will search for packages that include the letter “R” in a list of R package names (package_names.txt).\n\ngrep R package_names.txt\n\n14. RJDBC\n30. logNormReg\n27. gLRTH\n35. fermicatsR\n42. OptimaRegion\n61. PropScrRand\n25. RPyGeo\n47. SMARTp\n24. SCRT\n56. MARSS\n85. edfReader\n32. SPEDInstabR\n98. SmallCountRounding\n\n\nIf you are familiar with regular expressions, you can do cool things like search for a “r” followed by a white space with the \\s character set for white spaces.\n\ngrep -i 'r\\s' release_names.txt\n\nDecember Snowflakes\nEaster Beagle\nTrick or Treat\nBug in Your Hair\nAnother Canoe\nShort Summer\n\n\nIf there is more than one file to search, use the -H option to print the filename for each match.\n\ngrep -H F r_release.txt package_names.txt\n\nr_release.txt:Funny-looking Kid\npackage_names.txt:69. FField\npackage_names.txt:78. sybilccFBA\n\n\nAnd here is the file name and line number\n\ngrep -Hn F r_release.txt package_names.txt\n\nr_release.txt:1:Funny-looking Kid\npackage_names.txt:82:69. FField\npackage_names.txt:93:78. sybilccFBA\n\n\nAnd here we invert match for excluding the string “R”\n\ngrep -vi R r_release.txt package_names.txt\n\nr_release.txt:Funny-looking Kid\npackage_names.txt:36. mlflow\npackage_names.txt:10. aweek\npackage_names.txt:31. BIGDAWG\npackage_names.txt:22. vqtl\npackage_names.txt:29. sspline\npackage_names.txt:39. mev\npackage_names.txt:66. SuppDists\npackage_names.txt:15. MIAmaxent\npackage_names.txt:31. BIGDAWG\npackage_names.txt:29. sspline\npackage_names.txt:60. Eagle\npackage_names.txt:83. WPKDE\npackage_names.txt:11. hdnom\npackage_names.txt:26. blink\npackage_names.txt:18. gazepath\npackage_names.txt:52. ClimMobTools\npackage_names.txt:44. expstudies\npackage_names.txt:65. mined\npackage_names.txt:81. mgcViz\npackage_names.txt:45. solitude\npackage_names.txt:9. pAnalysis\npackage_names.txt:65. mined\npackage_names.txt:94. ICAOD\npackage_names.txt:48. geoknife\npackage_names.txt:45. solitude\npackage_names.txt:67. tictactoe\npackage_names.txt:46. cbsem\npackage_names.txt:93. PathSelectMP\npackage_names.txt:96. poisbinom\npackage_names.txt:17. ASIP\npackage_names.txt:5. pls\npackage_names.txt:84. BIOMASS\npackage_names.txt:59. AdMit\npackage_names.txt:77. SetMethods\npackage_names.txt:53. MVB\npackage_names.txt:2. odk\npackage_names.txt:86. mongolite\npackage_names.txt:4. TIMP\npackage_names.txt:97. AnalyzeTS\npackage_names.txt:87. WGScan\npackage_names.txt:63. dagitty\npackage_names.txt:69. FField\npackage_names.txt:13. MaXact\npackage_names.txt:73. VineCopula\npackage_names.txt:7. bayesbio\npackage_names.txt:34. ibd\npackage_names.txt:8. MVTests\npackage_names.txt:19. mcmcabn\npackage_names.txt:43. accept\npackage_names.txt:78. sybilccFBA\npackage_names.txt:62. lue\npackage_names.txt:100. addhaz\npackage_names.txt:37. CombinePValue\npackage_names.txt:1. cyclocomp\npackage_names.txt:54. OxyBS"
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html",
    "href": "posts/2023-11-07-version-control-part-1/index.html",
    "title": "Version control (Part 1)",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nSoftware Carpentry: Version Control with Git\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nSoftware Carpentry: Version Control with Git"
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#overview",
    "href": "posts/2023-11-07-version-control-part-1/index.html#overview",
    "title": "Version control (Part 1)",
    "section": "Overview",
    "text": "Overview\nFirst, a brief motivating example from Wolfman and Dracula. This story is from the Version Control with Git from Software Carpentry.\n\n[Source | Software Carpentry: Version Control with Git]\n\n\n\n\n\n\nThe story of Wolfman and Dracula\n\n\n\nWolfman and Dracula have been hired by Universal Missions (a space services spinoff from Euphoric State University) to investigate if it is possible to send their next planetary lander to Mars. They want to be able to work on the plans at the same time, but they have run into problems doing this in the past. If they take turns, each one will spend a lot of time waiting for the other to finish, but if they work on their own copies and email changes back and forth things will be lost, overwritten, or duplicated.\nA colleague suggests using version control to manage their work. Version control is better than mailing files back and forth:\n\nNothing that is committed to version control is ever lost, unless you work really, really hard at it. Since all old versions of files are saved, it’s always possible to go back in time to see exactly who wrote what on a particular day, or what version of a program was used to generate a particular set of results.\nAs we have this record of who made what changes when, we know who to ask if we have questions later on, and, if needed, revert to a previous version, much like the “undo” feature in an editor.\nWhen several people collaborate in the same project, it is possible to accidentally overlook or overwrite someone’s changes. The version control system automatically notifies users whenever there is a conflict between one person’s work and another’s.\n\n\n\nTeams are not the only ones to benefit from version control: lone researchers can benefit immensely. Keeping a record of what was changed, when, and why is extremely useful for all researchers if they ever need to come back to the project later on (e.g., a year later, when memory has faded).\nAnother way of thinking about this:\n\nVersion control is the lab notebook of the digital world. It is what professionals use to keep track of what they have done and to collaborate with other people. Every large software development project relies on it, and most programmers use it for their small jobs as well.\nIt is not just for software: books, papers, small data sets, and anything that changes over time or needs to be shared can and should be stored in a version control system."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#a-common-scenario",
    "href": "posts/2023-11-07-version-control-part-1/index.html#a-common-scenario",
    "title": "Version control (Part 1)",
    "section": "A common scenario",
    "text": "A common scenario\nWe have all been in this situation before: it seems unnecessary to have multiple nearly-identical versions of the same document. Some word processors let us deal with this a little better, such as Microsoft Word’s Track Changes or Google Docs’ version history.\n\n\n\n\n\nHow not to use GitHub [image from PhD Comics]\n\n\n\n\n[Source: PhD Comics]"
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git",
    "title": "Version control (Part 1)",
    "section": "git",
    "text": "git\nGit is what one type of a version control system for file management. The main idea is that as you (and your collaborators) work on a project, the software tracks, and records any changes made by anyone.\n\nSimilar to the “track changes” features in Microsoft Word, but more rigorous, powerful, and scaled up to multiple files\nGreat for solo or collaborative work\nVersion control systems start with a base version of the document and then record changes you make each step of the way.\nFor example, two users can make independent sets of changes on the same document.\nUnless multiple users make changes to the same section of the document - a conflict - you can incorporate two sets of changes into the same base document.\nIt allows us to decide which changes will be made to the next version (each record of these changes is called a commit), and keeps useful metadata about them.\nThe complete history of commits for a particular project and their metadata make up a repository.\nRepositories can be kept in sync across different computers, facilitating collaboration among different people.\n\n\n\n\n\n\n\nTerminology\n\n\n\n\ncommit: a record of each set of changes in a document or file\nrepository: the complete history of commits for a particular project and their metadata\n\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nVersion control is like an unlimited ‘undo’.\nVersion control also allows many people to work in parallel."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#github",
    "href": "posts/2023-11-07-version-control-part-1/index.html#github",
    "title": "Version control (Part 1)",
    "section": "GitHub",
    "text": "GitHub\nGitHub is a hosting service on internet for git-aware folders and projects\n\nSimilar to the DropBox or Google, but more structured, powerful, and programmatic\nGreat for solo or collaborative work!\nTechnically GitHub is distinct from Git. However, GitHub is in some sense the interface and Git the underlying engine (a bit like RStudio and R).\n\nSince we will only be using Git through GitHub, I tend to not distinguish between the two. In the following, I refer to all of it as just GitHub. Note that other interfaces to Git exist, e.g., Bitbucket, but GitHub is the most widely used one.\n\n\n\n\n\n\nTip\n\n\n\nTo learn a bit more about Git/GitHub and why you might want to use it, read this article by Jenny Bryan.\nNote her explanation of what’s special with the README.md file on GitHub.\n\n\n\n\n\n\n\n\nWhat to (not) do\n\n\n\n\nGitHub is ideal if you have a project with a fair number of files, most of those files are text files (such as code, LaTeX, (R)markdown, etc.) and different people work on different parts of the project.\nGitHub is less useful if you have a lot of non-text files (e.g. Word or Powerpoint) and different team members might want to edit the same document at the same time. In that instance, a solution like Google Docs, Word+Dropbox, Word+Onedrive, etc. might be better.\n\n\n\n\n\n\n\n\n\nHow to use Git/GitHub\n\n\n\nGit and GitHub is fundamentally based on commands you type into the command line. Lots of online resources show you how to use the command line. This is the most powerful, and the way I almost always interact with git/GitHub. However, many folks find this the most confusing way to use git/GitHub. Alternatively, there are graphical interfaces.\n\nGitHub itself provides a grapical interface with basic functionality.\nRStudio also has Git/GitHub integration. Of course this only works for R project GitHub integration.\nThere are also third party GitHub clients with many advanced features, most of which you won’t need initially, but might eventually.\n\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nAs student, you can (and should) upgrade to the Pro version of GitHub for free (i.e. access to unlimited private repositories is one benefit), see the GitHub student developer pack on how to do this."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#getting-started",
    "href": "posts/2023-11-07-version-control-part-1/index.html#getting-started",
    "title": "Version control (Part 1)",
    "section": "Getting started",
    "text": "Getting started\nOne of my favorite resources for getting started with git/GitHub is the Happy Git with R from Jenny Bryan:\n\nhttps://happygitwithr.com\n\n\n\n\n\n\nA screenshot of the Happy Git with R online book from Jenny Bryan\n\n\n\n\nIt truly is one of the best resources out there for getting started with git/GitHub, especially with the integration to RStudio. Therefore, at this point, I will encourage all of you to go read through the online book.\nSome of you may only need to skim it, others will need to spend some time reading through it. Either way, I will bet that you won’t regret the time investment."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#using-gitgithub-in-our-course",
    "href": "posts/2023-11-07-version-control-part-1/index.html#using-gitgithub-in-our-course",
    "title": "Version control (Part 1)",
    "section": "Using git/GitHub in our course",
    "text": "Using git/GitHub in our course\nIn this course, you will use git/GitHub in the following ways:\n\nProjects 2-4 - You will use git locally (on your compute environment) to track your changes over time and, you will push your project solutions to a private GitHub repository on GitHub Classroom (i.e. you will use the command-line commands git add, git commit, git push, git pull, etc) .\n\nLearning these skills will be useful down the road if you ever work collaboratively on a project (i.e. writing code as a group). In this scenario, you will use the skills you have been practicing in your projects to work together as a team in a single GitHub repository."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git-config",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git-config",
    "title": "Version control (Part 1)",
    "section": "git config",
    "text": "git config\nWhen we use Git on a new computer for the first time, we need to configure a few things:\n\nour name and email address\nwhat our preferred text editor is\nand that we want to use these settings globally (i.e. for every project).\n\nOn a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information.\nHere is how to set up Git on a new laptop:\n$ git config --global user.name \"My Name\"\n$ git config --global user.email \"myemail@email.com\"\nThis user name and email will be associated with your subsequent Git activity after this lecture.\n\n\n\n\n\n\nImportant\n\n\n\nFor the lectures this week, we will be interacting with GitHub and so the email address used should be the same as the one used when setting up your GitHub account."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git-config-settings",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git-config-settings",
    "title": "Version control (Part 1)",
    "section": "git config settings",
    "text": "git config settings\nYou can check your settings at any time:\n$ git config --list\n\n\n\n\n\n\nGit Help and Manual\n\n\n\nIf you forget the options of a git command, you can type git &lt;command&gt; -h or access the corresponding Git manual by typing git &lt;command&gt; --help, e.g.:\n$ git config -h\n$ git config --help\nYou can press Q to exit the manual.\nYou can also get the list of available git commands and further resources of the Git manual typing:\n$ git help\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nUse git config with the --global option to configure a user name, email address, editor, and other preferences once per machine.\n\n\n\nNote that we will omit the $ from shell commands shown from here onwards to make it easier to run them interactively in this tutorial."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git-init",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git-init",
    "title": "Version control (Part 1)",
    "section": "git init",
    "text": "git init\nOnce Git is configured, we can start using it.\nFirst, let’s create a new directory in the Desktop folder for our work and then change the current working directory to the newly created one:\ncd ~/Desktop\nmkdir planets\ncd planets\npwd\n/Users/stephaniehicks/Desktop/planets\nThen we tell Git to make planets a repository – a place where Git can store versions of our files:\ngit init\nNote that the creation of the planets directory and its initialization as a repository are completely separate processes.\nIf we use ls to show the directory’s contents, it appears that nothing has changed:\nls\nBut if we add the -a flag to show everything, we can see that Git has created a hidden directory within planets called .git:\nls -a\n.   ..  .git\nGit uses this special subdirectory to store all the information about the project, including the tracked files and sub-directories located within the project’s directory.\nIf we ever delete the .git subdirectory, we will lose the project’s history.\nNext, we will change the default branch to be called main. This might be the default branch depending on your settings and version of git.\ngit checkout -b main\nSwitched to a new branch 'main'"
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git-status",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git-status",
    "title": "Version control (Part 1)",
    "section": "git status",
    "text": "git status\nWe can check that everything is set up correctly by asking Git to tell us the status of our project:\ngit status\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n\n\n\n\n\n\nCorrecting git init Mistakes\n\n\n\nSuppose you have created the Git repository in the wrong directory, or made some other mistake.\nYou can delete the git repository by simply deleting the .git directory, either in Finder / Windows Explorer or from the command line:\nrm -rf .git\nBut be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. Therefore, always check your current directory using the command pwd.\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\ngit init initializes a repository.\nGit stores all of its repository data in the .git directory."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git-add",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git-add",
    "title": "Version control (Part 1)",
    "section": "git add",
    "text": "git add\nLet’s create a file called mars.txt that contains some notes about the Red Planet’s suitability as a base.\nWe will use touch to create the file, and then open it in TextEdit or Notepad. Alternatively, you can use a command-line text editor such as nano.\ntouch mars.txt\nNow, open the .txt file and type the text below into the mars.txt file:\nCold and dry, but everything is my favorite color\nLet’s first verify that the file was properly created by running the list command (ls):\nls\nmars.txt contains a single line, which we can see by running:\ncat mars.txt\nCold and dry, but everything is my favorite color\nIf we check the status of our project again, Git tells us that it’s noticed the new file:\ngit status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    mars.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThe “untracked files” message means that there is a file in the directory that Git is not keeping track of. We can tell Git to track a file using git add:\ngit add mars.txt\nand then check that the right thing happened:\ngit status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   mars.txt"
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#git-commit",
    "href": "posts/2023-11-07-version-control-part-1/index.html#git-commit",
    "title": "Version control (Part 1)",
    "section": "git commit",
    "text": "git commit\nGit now knows that it is supposed to keep track of mars.txt, but it has not recorded these changes as a commit yet. To get it to do that, we need to run one more command:\ngit commit -m \"Start notes on Mars as a base\"\n[main (root-commit) ef11b6d] Start notes on Mars as a base\n 1 file changed, 1 insertion(+)\n create mode 100644 mars.txt\n\n\n\n\n\n\nNote\n\n\n\nWhen we run git commit,\n\nGit takes everything we have told it to save by using git add and stores a copy permanently inside the special .git directory.\nThis permanent copy is called a commit (or revision) and its short identifier is ef11b6d.\nYour commit may have another identifier.\n\n\n\n\n\n\n\n\n\ngit commit message\n\n\n\nWe use the -m flag (for “message”) to record a short, descriptive, and specific comment that will help us remember later on what we did and why.\nIf we just run git commit without the -m option, Git will launch nano (or whatever other editor is configured as core.editor) so that we can write a longer message.\n\n\nGood commit messages start with a brief (&lt;50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence “If applied, this commit will”. If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.\nIf we run git status now:\ngit status\nOn branch main\nnothing to commit, working tree clean\nit tells us everything is up to date. If we want to know what we’ve done recently, we can ask Git to show us the project’s history using git log:\ngit log\ncommit ef11b6d0b1181bcf34bed85e7d60e663e8bbde93 (HEAD -&gt; main)\nAuthor: Stephanie Hicks &lt;stephaniechicks@gmail.com&gt;\nDate:   Sun Oct 29 22:12:47 2023 -0400\n\n    Start notes on Mars as a base\ngit log lists all commits made to a repository in reverse chronological order."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#adding-changes-to-a-file",
    "href": "posts/2023-11-07-version-control-part-1/index.html#adding-changes-to-a-file",
    "title": "Version control (Part 1)",
    "section": "Adding changes to a file",
    "text": "Adding changes to a file\nNow suppose we add more information to the file. (Again, we will edit with TextEdit / Notepad and then cat the file to show its contents.)\nPaste the following second line into the file:\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nWhen we run git status now, it tells us that a file it already knows about has been modified:\ngit status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   mars.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nThe last line is the key phrase: “no changes added to commit”. We have changed this file, but we have not told Git we will want to save those changes (which we do with git add) nor have we saved them (which we do with git commit).\nSo let’s do that now. It is good practice to always review our changes before saving them. We do this using git diff. This shows us the differences between the current state of the file and the most recently saved version:\ngit diff\ndiff --git a/mars.txt b/mars.txt\nindex bd9fd42..6967aea 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1 +1,2 @@\n Cold and dry, but everything is my favorite color\n+The two moons may be a problem for Wolfman\nThe output is cryptic because it is actually a series of commands for tools like editors and patch telling them how to reconstruct one file given the other.\nAfter reviewing our change, it’s time to commit it:\ngit commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   mars.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nWhoops: Git will no commit because we did not use git add first. Let’s fix that:\ngit add mars.txt\ngit commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n[main 5635827] Add concerns about effects of Mars' moons on Wolfman\n 1 file changed, 1 insertion(+)"
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#staging-area",
    "href": "posts/2023-11-07-version-control-part-1/index.html#staging-area",
    "title": "Version control (Part 1)",
    "section": "Staging area",
    "text": "Staging area\nGit insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches.\nTo allow for this, Git has a special staging area where it keeps track of things that have been added but not yet committed.\n\n\n\n\n\n\nStaging Area\n\n\n\nIf you think of Git as taking snapshots of changes over the life of a project, git add specifies what will go in a snapshot (putting things in the staging area), and git commit then actually takes the snapshot, and makes a permanent record of it (as a commit).\nIf you do not have anything staged when you type git commit, Git will prompt you to use git commit -a or git commit --all, which will add all files. However, it’s almost always better to explicitly add things to the staging area, because you might commit changes you forgot you made.\nTry to stage things manually, or you might find yourself searching for “git undo commit” more than you would like!\n\n\nLet’s watch as our changes to a file move from our editor to the staging area and into long-term storage. First, we’ll add another line to the file:\ncat mars.txt\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\ngit diff\ndiff --git a/mars.txt b/mars.txt\nindex 6967aea..b36abfd 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1,2 +1,3 @@\n Cold and dry, but everything is my favorite color\n The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\nSo far, so good: we’ve added one line to the end of the file (shown with a + in the first column). Now let’s put that change in the staging area and see what git diff reports:\ngit add mars.txt\ngit diff\nThere is no output: as far as Git can tell, there’s no difference between what it’s been asked to save permanently and what’s currently in the directory. However, if we do this:\ngit diff --staged\ndiff --git a/mars.txt b/mars.txt\nindex 6967aea..b36abfd 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1,2 +1,3 @@\n Cold and dry, but everything is my favorite color\n The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\nit shows us the difference between the last committed change and what’s in the staging area. Let’s save our changes:\ngit commit -m \"Discuss concerns about Mars' climate for Mummy\"\n[main e86c8f6] Discuss concerns about Mars' climate for Mummy\n 1 file changed, 1 insertion(+)\ncheck our status:\ngit status\nOn branch main\nnothing to commit, working tree clean\nand look at the history of what we’ve done so far:\ngit log\ncommit e86c8f6fdb53a390a5dfea6f9f9052f05fd35baa (HEAD -&gt; main)\nAuthor: Stephanie Hicks &lt;stephaniechicks@gmail.com&gt;\nDate:   Sun Oct 29 23:27:34 2023 -0400\n\n    Discuss concerns about Mars' climate for Mummy\n\ncommit 563582798a711c58c0f23555c452685c71fd4c4e\nAuthor: Stephanie Hicks &lt;stephaniechicks@gmail.com&gt;\nDate:   Sun Oct 29 23:23:16 2023 -0400\n\n    Add concerns about effects of Mars' moons on Wolfman\n\ncommit ef11b6d0b1181bcf34bed85e7d60e663e8bbde93\nAuthor: Stephanie Hicks &lt;stephaniechicks@gmail.com&gt;\nDate:   Sun Oct 29 23:12:47 2023 -0400\n\n    Start notes on Mars as a base\n\n\n\n\n\n\nWord-based diffing\n\n\n\nSometimes, e.g. in the case of the text documents a line-wise diff is too coarse. That is where the --color-words option of git diff comes in very useful as it highlights the changed words using colors.\n\n\n\n\n\n\n\n\nPaging the Log\n\n\n\nIf the output of git log is too long to fit in your screen, Git splits it into pages.\nTo get out of the pager, press Q.\nTo move to the next page, press Spacebar."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#directories",
    "href": "posts/2023-11-07-version-control-part-1/index.html#directories",
    "title": "Version control (Part 1)",
    "section": "Directories",
    "text": "Directories\nTwo important facts you should know about directories in Git.\nFirst, Git does not track directories on their own, only files within them. Try it for yourself:\nmkdir spaceships\ngit status\ngit add spaceships\ngit status\nOn branch main\nnothing to commit, working tree clean\nNote, our newly created empty directory spaceships does not appear in the list of untracked files even if we explicitly add it (via git add) to our repository.\nSecond, if you create a directory in your Git repository and populate it with files, you can add all files in the directory at once by:\ngit add &lt;directory-with-files&gt;\nTry it for yourself:\ntouch spaceships/apollo-11 spaceships/sputnik-1\ngit status\ngit add spaceships\ngit status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        new file:   spaceships/apollo-11\n        new file:   spaceships/sputnik-1\nBefore moving on, we will commit these changes.\ngit commit -m \"Add some initial thoughts on spaceships\"\n[main ac23fe8] Add some initial thoughts on spaceships\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 spaceships/apollo-11\n create mode 100644 spaceships/sputnik-1\nTo recap, when we want to add changes to our repository, we first need to add the changed files to the staging area (git add) and then commit the staged changes to the repository (git commit).\nFor a visualization of this workflow, see the Software Carpentry: Version Control with Git page."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#exercises",
    "href": "posts/2023-11-07-version-control-part-1/index.html#exercises",
    "title": "Version control (Part 1)",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nChoosing a Commit Message\n\n\n\nWhich of the following commit messages would be most appropriate for the last commit made to mars.txt?\n\n“Changes”\n“Added line ‘But the Mummy will appreciate the lack of humidity’ to mars.txt”\n“Discuss effects of Mars’ climate on the Mummy”\n\n\n\n\n\n\n\n\n\nCommitting Changes to Git\n\n\n\nWhich command(s) below would save the changes of myfile.txt to my local Git repository?\ngit commit -m \"my recent changes\"\ngit init myfile.txt\ngit commit -m \"my recent changes\"\ngit add myfile.txt\ngit commit -m \"my recent changes\"\ngit commit -m myfile.txt \"my recent changes\"\n\n\nAdditional exercises are available on the Software Carpentry: Version Control with Git page.\n\n\n\n\n\n\nKey Points\n\n\n\n\ngit status shows the status of a repository.\nFiles can be stored in a project’s working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\ngit add puts files in the staging area.\ngit commit saves the staged content as a new commit in the local repository.\nWrite a commit message that accurately describes your changes."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#restoring-older-versions",
    "href": "posts/2023-11-07-version-control-part-1/index.html#restoring-older-versions",
    "title": "Version control (Part 1)",
    "section": "Restoring older versions",
    "text": "Restoring older versions\nAll right! So we can save changes to files and see what we’ve changed.\nNow, how can we restore older versions of things? Let’s suppose we change our mind about the last update to mars.txt.\ngit status now tells us that the file has been changed, but those changes have not been staged:\ngit status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   mars.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nWe can put things back the way they were by using git checkout:\ngit checkout HEAD mars.txt\ncat mars.txt\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nAs you might guess from its name, git checkout checks out (i.e., restores) an old version of a file. In this case, we are telling Git that we want to recover the version of the file recorded in HEAD, which is the last saved commit.\nIf we want to go back even further, we can use a commit identifier instead:\ngit checkout ef11b6d mars.txt\nUpdated 1 path from 3e62de1\ncat mars.txt\nCold and dry, but everything is my favorite color\ngit status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   mars.txt\nNotice that the changes are currently in the staging area. Again, we can put things back the way they were by using git checkout:\ngit checkout HEAD mars.txt\nUpdated 1 path from aab57ac\n\n\n\n\n\n\nDon’t Lose Your HEAD\n\n\n\nAbove we used\ngit checkout ef11b6d mars.txt\nto revert mars.txt to its state after the commit ef11b6d.\nBut be careful! The command checkout has other important functionalities and Git will misunderstand your intentions if you are not accurate with the typing.\nFor example, if you forget mars.txt in the previous command.\ngit checkout ef11b6d\nNote: switching to 'ef11b6d'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at ef11b6d Start notes on Mars as a base\nThe “detached HEAD” state lets you look around without the repository without making any changes, so you shouldn’t make any changes in this state. After investigating your repository’s past state, reattach your HEAD with git checkout main.\ngit checkout main\nPrevious HEAD position was ef11b6d Start notes on Mars as a base\nSwitched to branch 'main'\n\n\n\n\n\n\n\n\nSequence of commits\n\n\n\nIt’s important to remember that we must use the commit number that identifies the state of the repository before the change we’re trying to undo. A common mistake is to use the number of the commit in which we made the change we’re trying to discard.\n\n\nFor some additional visualizations, see the Software Carpentry: Version Control with Git page.\n\n\n\n\n\n\nSimplifying the Common Case\n\n\n\nIf you read the output of git status carefully, you will see that it includes this hint:\n(use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\nAs it says, git checkout without a version identifier restores files to the state saved in HEAD. The double dash -- is needed to separate the names of the files being recovered from the command itself: without it, Git would try to use the name of the file as the commit identifier.\n\n\nThe fact that files can be reverted one by one tends to change the way people organize their work. If everything is in one large document, it is hard (but not impossible) to undo changes to the introduction without also undoing changes made later to the conclusion. If the introduction and conclusion are stored in separate files, on the other hand, moving backward and forward in time becomes much easier."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#exercises-1",
    "href": "posts/2023-11-07-version-control-part-1/index.html#exercises-1",
    "title": "Version control (Part 1)",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nRecovering Older Versions of a File\n\n\n\nJennifer has made changes to the R script that she has been working on for weeks, and the modifications she made this morning “broke” the script and it no longer runs. She has spent ~ 1hr trying to fix it, with no luck…\nLuckily, she has been keeping track of her project’s versions using Git! Which commands below will let her recover the last committed version of her R script called data_cruncher.R?\n\ngit checkout HEAD\ngit checkout HEAD data_cruncher.R\ngit checkout HEAD~1 data_cruncher.R\ngit checkout &lt;unique ID of last commit&gt; data_cruncher.R\nBoth 2 and 4\n\n\n\n\n\n\n\n\n\nReverting a Commit\n\n\n\nJennifer is collaborating with colleagues on her R script. She realizes her last commit to the project’s repository contained an error, and wants to undo it. Jennifer wants to undo correctly so everyone in the project’s repository gets the correct change. The command git revert [erroneous commit ID] will create a new commit that reverses the erroneous commit.\nThe command git revert is different from git checkout [commit ID] because git checkout returns the files not yet committed within the local repository to a previous state, whereas git revert reverses changes committed to the local and project repositories.\nBelow are the right steps and explanations for Jennifer to use git revert, what is the missing command?\n\n________ # Look at the git history of the project to find the commit ID\nCopy the ID (the first few characters of the ID, e.g. 0b1d055).\ngit revert [commit ID]\nType in the new commit message.\nSave and close\n\n\n\n\n\n\n\n\n\nChecking Understanding of git diff\n\n\n\nConsider this command: git diff HEAD~9 mars.txt. What do you predict this command will do if you execute it? What happens when you do execute it? Why?\nTry another command, git diff [ID] mars.txt, where [ID] is replaced with the unique identifier for your most recent commit. What do you think will happen, and what does happen?\n\n\nAdditional exercises are available on the Software Carpentry: Version Control with Git page.\n\n\n\n\n\n\nKey Points\n\n\n\n\ngit diff displays differences between commits.\ngit checkout recovers old versions of files."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#exercises-2",
    "href": "posts/2023-11-07-version-control-part-1/index.html#exercises-2",
    "title": "Version control (Part 1)",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nIgnoring Nested Files\n\n\n\nGiven a directory structure that looks like:\nresults/data\nresults/plots\nHow would you ignore only results/plots and not results/data?\n\n\n\n\n\n\n\n\nIncluding Specific Files\n\n\n\nHow would you ignore all .dat files in your root directory except for final.dat?\nHint: Find out what ! (the exclamation point operator) does.\nThe exclamation point operator will include a previously excluded entry.\n\n\n\n\n\n\n\n\nIgnoring all data Files in a Directory\n\n\n\nAssuming you have an empty .gitignore file, and given a directory structure that looks like:\nresults/data/position/gps/a.dat\nresults/data/position/gps/b.dat\nresults/data/position/gps/c.dat\nresults/data/position/gps/info.txt\nresults/plots\nWhat’s the shortest .gitignore rule you could write to ignore all .dat files in result/data/position/gps? Do not ignore the info.txt.\n\n\n\n\n\n\n\n\nIgnoring all data Files in the repository\n\n\n\nLet us assume you have many .dat files in different subdirectories of your repository. For example, you might have:\nresults/a.dat\ndata/experiment_1/b.dat\ndata/experiment_2/c.dat\ndata/experiment_2/variation_1/d.dat\nHow do you ignore all the .dat files, without explicitly listing the names of the corresponding folders?\n\n\nAdditional exercises are available on the Software Carpentry: Version Control with Git page.\n\n\n\n\n\n\nKey Points\n\n\n\n\nThe .gitignore file tells Git what files to ignore."
  },
  {
    "objectID": "posts/2023-11-07-version-control-part-1/index.html#preparation-for-next-lesson",
    "href": "posts/2023-11-07-version-control-part-1/index.html#preparation-for-next-lesson",
    "title": "Version control (Part 1)",
    "section": "Preparation for next lesson",
    "text": "Preparation for next lesson\nIn the next lesson, we will learn how to use git remotes and GitHub. As preparation, you can sign up for a GitHub account if you do not already have one."
  },
  {
    "objectID": "projects/2023-10-26-project-1/index.html",
    "href": "projects/2023-10-26-project-1/index.html",
    "title": "Project 1",
    "section": "",
    "text": "Due date: November 10 at 11:59pm\nThe goal of this assignment is to practice some of the skills we have been learning about in class around Quarto, command-line, and version control by building and deploying a website. You also are asked to practice with some command-line skills more formally.\n\n\nPlease use this Quarto file (.qmd) and fill in the requested components by adding the URLs pointing to the private and public repositories and deployed websites. Render this file to a HTML file and submit your HTML file to the dropbox on CoursePlus. Please show all your code, if relevant to a section."
  },
  {
    "objectID": "projects/2023-10-26-project-1/index.html#create-a-github-repo-for-your-website",
    "href": "projects/2023-10-26-project-1/index.html#create-a-github-repo-for-your-website",
    "title": "Project 1",
    "section": "1. Create a GitHub repo for your website",
    "text": "1. Create a GitHub repo for your website\nCreate a new public GitHub repository titled biostat777-intro-&lt;firstname&gt;-&lt;lastname&gt; (where you replace &lt;firstname&gt; with your first name and &lt;lastname&gt; with your last name) in your own personal GitHub account (e.g. https://github.com/&lt;yourgithubusername&gt;/biostat777-intro-&lt;firstname&gt;-&lt;lastname&gt;)."
  },
  {
    "objectID": "projects/2023-10-26-project-1/index.html#build-a-website-using-quarto",
    "href": "projects/2023-10-26-project-1/index.html#build-a-website-using-quarto",
    "title": "Project 1",
    "section": "2. Build a website using Quarto",
    "text": "2. Build a website using Quarto\nCreate a new project locally within RStudio and build a website for yourself. Your website should include the following:\n\nA home/landing page. This is home page that someone will land on your website. At minimum it should include your name, a short summary about yourself (max 2-3 sentences), and a picture of something you enjoy to do for fun (or a picture of yourself if you are comfortable sharing one).\nA page titled ‘About’. This page should describe who you are in greater detail. It could include your professional interests and your educational and/or professional background and/or experience. It could also include any personal information you feel conformable sharing on the website.\nA data analysis page called ‘Example analysis’. You can pick any dataset you wish you analyze. In this webpage, you will analyze a dataset and summarize the results. The requirements for this webpage are the following:\n\nYou must describe what is the question you aim to answer with the data and data analysis.\nYou must describe who is the intended audience for the data analysis.\nYou must describe and link to where the original data come from that you chose.\nYou must include a link to a data dictionary for the data or create one inside the webpage.\nYour analysis must include some minimal form of data wrangling with you using at least five different functions from dplyr or tidyr.\nYour analysis should include at least three plots with you using at least three different geom_*() functions from ggplot2 (or another package with geom_*() functions).\nPlots should have titles, subtitles, captions, and human-understandable axis labels.\nAt least one plot should using a type of faceting (facet_grid() or facet_wrap()).\nYour analysis must include one image or table (not one you created yourself, but one you have saved locally or one from the web).\nYour analysis must include at least two different callout blocks.\nYour analysis must include a .bib file, which you use to reference at least three unique citations. For example, it could be to a website or paper from where the original data came from or it could be to a paper describing a method you are using to analyze the data.\nYour analysis must include the use of at least 1 margin content.\nYou must summarize your analysis and/or results with a paragraph (4-6 sentences).\nAt the end of the data analysis, list out each of the functions you used from each of the packages (dplyr, tidyr, and ggplot2) to help the TA with respect to making sure you met all the requirements described above."
  },
  {
    "objectID": "projects/2023-10-26-project-1/index.html#include-a-readme.md-file",
    "href": "projects/2023-10-26-project-1/index.html#include-a-readme.md-file",
    "title": "Project 1",
    "section": "3. Include a README.md file",
    "text": "3. Include a README.md file\nYour local repository should include a README.md file describing who is the author of the website and a link to the website after it has been deployed. Other things you might include are the technical details for how the website was created and/or deployed."
  },
  {
    "objectID": "projects/2023-10-26-project-1/index.html#deploy-your-website",
    "href": "projects/2023-10-26-project-1/index.html#deploy-your-website",
    "title": "Project 1",
    "section": "4. Deploy your website",
    "text": "4. Deploy your website\nDeploy your website using Quarto Pub, GitHub pages, or Netlify. (Note: Deploying your website to RPubs will not be accepted)."
  },
  {
    "objectID": "projects/2023-10-26-project-1/index.html#share-your-website",
    "href": "projects/2023-10-26-project-1/index.html#share-your-website",
    "title": "Project 1",
    "section": "5. Share your website",
    "text": "5. Share your website\nGo to the Discussion Board in CoursePlus and write a short post with a link (URL) to your website (and URL to the corresponding GitHub repository) that you created. Also, list the URLs below for the purposes of grading.\nAs you read the introductions from other folks in the class, feel free to comment/reply using Discussion board.\n\nLink to your GitHub repository: [Delete this text and replace the text with the link to the public GitHub repo you created above for your website]\nLink to your deployed website: [Delete this and replace the text with the link to the public deployed website you created above]"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "For Qmd files, go to the course GitHub repository and navigate the directories, or best of all to clone the repo and navigate within RStudio.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nDates\nTopics\nProjects\n\n\n\n\n\nModule 1\n\nStatistical programming at the command-line\n\n\n\n\n\n\n\n\n\n\n\nWeek 1\nOct 26\nCourse introduction [syllabus]\n🌴 Project 1 [html] [Qmd]\n\n\n\n\n\nBuilding websites with quarto [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2\nOct 31\nIntroduction to the command-line [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nNov 2\nMore advanced command-line tools [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nWeek 3\nNov 7\nVersion control (git) [html] [Qmd]\n🌴 Project 2\n\n\n\n\n\n\n\n\n\n\n\nNov 9\nVersion control (GitHub) [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nNov 10\n\n🍂 Project 1 due\n\n\n\n\n\n\n\n\n\n\nModule 2\n\nR software development\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\nNov 14\nObject Oriented Programming\n\n\n\n\n\n\n\n\n\n\n\n\nNov 16\nMore OOP\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\nNov 21\nR package software development\n\n\n\n\n\n\n\n\n\n\n\n\nNov 23\n🦃 No lecture, enjoy the break!\n\n\n\n\n\n\n\n\n\n\n\n\nNov 24\n\n\n\n\n\n\n\n\n\n\n\n\nModule 3\n\nAdvanced programming paradigms\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\nNov 28\nFunctional programming with purrr\n🍂 Project 2 due  🌴 Project 3\n\n\n\n\n\n\n\n\n\n\n\nNov 30\nProject management with targets\n\n\n\n\n\n\nPackage website with pkgdown\n\n\n\n\n\n\n\n\n\n\n\nWeek 7\nDec 5\nRetrieving data from APIs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 7\nRelational databases and SQL basics\n\n\n\n\n\n\n\n\n\n\n\nModule 4\n\nInteractive web apps and dashboards\n\n\n\n\n\n\n\n\n\n\n\nWeek 8\nDec 12\nBuilding dashboards with flexdashboard and shinydashboard\n🍂 Project 3 due  🌴 Project 4\n\n\n\n\n\n\n\n\n\n\n\nDec 14\nScraping data from the web with rvest\n\n\n\n\n\n\n\n\n\n\n\nModule 5\n\nDealing with “big” data\n\n\n\n\n\n\n\n\n\n\n\nWeek 9\nDec 19\nStrategies for dealing with large data\n\n\n\n\n\n\n\n\n\n\n\n\nDec 21\n❄️ Class is canceled\n\n\n\n\n\n\n\n\n\n\n\n\nDec 22\n\n🍂 Project 4 due"
  },
  {
    "objectID": "schedule.html#schedule-and-course-materials",
    "href": "schedule.html#schedule-and-course-materials",
    "title": "Schedule",
    "section": "",
    "text": "For Qmd files, go to the course GitHub repository and navigate the directories, or best of all to clone the repo and navigate within RStudio.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nDates\nTopics\nProjects\n\n\n\n\n\nModule 1\n\nStatistical programming at the command-line\n\n\n\n\n\n\n\n\n\n\n\nWeek 1\nOct 26\nCourse introduction [syllabus]\n🌴 Project 1 [html] [Qmd]\n\n\n\n\n\nBuilding websites with quarto [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2\nOct 31\nIntroduction to the command-line [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nNov 2\nMore advanced command-line tools [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nWeek 3\nNov 7\nVersion control (git) [html] [Qmd]\n🌴 Project 2\n\n\n\n\n\n\n\n\n\n\n\nNov 9\nVersion control (GitHub) [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nNov 10\n\n🍂 Project 1 due\n\n\n\n\n\n\n\n\n\n\nModule 2\n\nR software development\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\nNov 14\nObject Oriented Programming\n\n\n\n\n\n\n\n\n\n\n\n\nNov 16\nMore OOP\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\nNov 21\nR package software development\n\n\n\n\n\n\n\n\n\n\n\n\nNov 23\n🦃 No lecture, enjoy the break!\n\n\n\n\n\n\n\n\n\n\n\n\nNov 24\n\n\n\n\n\n\n\n\n\n\n\n\nModule 3\n\nAdvanced programming paradigms\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\nNov 28\nFunctional programming with purrr\n🍂 Project 2 due  🌴 Project 3\n\n\n\n\n\n\n\n\n\n\n\nNov 30\nProject management with targets\n\n\n\n\n\n\nPackage website with pkgdown\n\n\n\n\n\n\n\n\n\n\n\nWeek 7\nDec 5\nRetrieving data from APIs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 7\nRelational databases and SQL basics\n\n\n\n\n\n\n\n\n\n\n\nModule 4\n\nInteractive web apps and dashboards\n\n\n\n\n\n\n\n\n\n\n\nWeek 8\nDec 12\nBuilding dashboards with flexdashboard and shinydashboard\n🍂 Project 3 due  🌴 Project 4\n\n\n\n\n\n\n\n\n\n\n\nDec 14\nScraping data from the web with rvest\n\n\n\n\n\n\n\n\n\n\n\nModule 5\n\nDealing with “big” data\n\n\n\n\n\n\n\n\n\n\n\nWeek 9\nDec 19\nStrategies for dealing with large data\n\n\n\n\n\n\n\n\n\n\n\n\nDec 21\n❄️ Class is canceled\n\n\n\n\n\n\n\n\n\n\n\n\nDec 22\n\n🍂 Project 4 due"
  }
]